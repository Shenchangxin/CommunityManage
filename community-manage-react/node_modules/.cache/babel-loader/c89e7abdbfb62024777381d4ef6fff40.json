{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nObject.defineProperty(exports, 'DIFF_DELETE', {\n  enumerable: true,\n  get: function () {\n    return _cleanupSemantic.DIFF_DELETE;\n  }\n});\nObject.defineProperty(exports, 'DIFF_EQUAL', {\n  enumerable: true,\n  get: function () {\n    return _cleanupSemantic.DIFF_EQUAL;\n  }\n});\nObject.defineProperty(exports, 'DIFF_INSERT', {\n  enumerable: true,\n  get: function () {\n    return _cleanupSemantic.DIFF_INSERT;\n  }\n});\nObject.defineProperty(exports, 'Diff', {\n  enumerable: true,\n  get: function () {\n    return _cleanupSemantic.Diff;\n  }\n});\nObject.defineProperty(exports, 'diffLinesRaw', {\n  enumerable: true,\n  get: function () {\n    return _diffLines.diffLinesRaw;\n  }\n});\nObject.defineProperty(exports, 'diffLinesUnified', {\n  enumerable: true,\n  get: function () {\n    return _diffLines.diffLinesUnified;\n  }\n});\nObject.defineProperty(exports, 'diffLinesUnified2', {\n  enumerable: true,\n  get: function () {\n    return _diffLines.diffLinesUnified2;\n  }\n});\nObject.defineProperty(exports, 'diffStringsRaw', {\n  enumerable: true,\n  get: function () {\n    return _printDiffs.diffStringsRaw;\n  }\n});\nObject.defineProperty(exports, 'diffStringsUnified', {\n  enumerable: true,\n  get: function () {\n    return _printDiffs.diffStringsUnified;\n  }\n});\nexports.default = void 0;\n\nvar _chalk = _interopRequireDefault(require('chalk'));\n\nvar _jestGetType = _interopRequireDefault(require('jest-get-type'));\n\nvar _prettyFormat = _interopRequireDefault(require('pretty-format'));\n\nvar _cleanupSemantic = require('./cleanupSemantic');\n\nvar _constants = require('./constants');\n\nvar _diffLines = require('./diffLines');\n\nvar _normalizeDiffOptions = require('./normalizeDiffOptions');\n\nvar _printDiffs = require('./printDiffs');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\n\nconst getCommonMessage = (message, options) => {\n  const {\n    commonColor\n  } = (0, _normalizeDiffOptions.normalizeDiffOptions)(options);\n  return commonColor(message);\n};\n\nconst {\n  AsymmetricMatcher,\n  DOMCollection,\n  DOMElement,\n  Immutable,\n  ReactElement,\n  ReactTestComponent\n} = _prettyFormat.default.plugins;\nconst PLUGINS = [ReactTestComponent, ReactElement, DOMElement, DOMCollection, Immutable, AsymmetricMatcher];\nconst FORMAT_OPTIONS = {\n  plugins: PLUGINS\n};\nconst FORMAT_OPTIONS_0 = { ...FORMAT_OPTIONS,\n  indent: 0\n};\nconst FALLBACK_FORMAT_OPTIONS = {\n  callToJSON: false,\n  maxDepth: 10,\n  plugins: PLUGINS\n};\nconst FALLBACK_FORMAT_OPTIONS_0 = { ...FALLBACK_FORMAT_OPTIONS,\n  indent: 0\n}; // Generate a string that will highlight the difference between two values\n// with green and red. (similar to how github does code diffing)\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nfunction diff(a, b, options) {\n  if (Object.is(a, b)) {\n    return getCommonMessage(_constants.NO_DIFF_MESSAGE, options);\n  }\n\n  const aType = (0, _jestGetType.default)(a);\n  let expectedType = aType;\n  let omitDifference = false;\n\n  if (aType === 'object' && typeof a.asymmetricMatch === 'function') {\n    if (a.$$typeof !== Symbol.for('jest.asymmetricMatcher')) {\n      // Do not know expected type of user-defined asymmetric matcher.\n      return null;\n    }\n\n    if (typeof a.getExpectedType !== 'function') {\n      // For example, expect.anything() matches either null or undefined\n      return null;\n    }\n\n    expectedType = a.getExpectedType(); // Primitive types boolean and number omit difference below.\n    // For example, omit difference for expect.stringMatching(regexp)\n\n    omitDifference = expectedType === 'string';\n  }\n\n  if (expectedType !== (0, _jestGetType.default)(b)) {\n    return '  Comparing two different types of values.' + ` Expected ${_chalk.default.green(expectedType)} but ` + `received ${_chalk.default.red((0, _jestGetType.default)(b))}.`;\n  }\n\n  if (omitDifference) {\n    return null;\n  }\n\n  switch (aType) {\n    case 'string':\n      return (0, _diffLines.diffLinesUnified)(a.split('\\n'), b.split('\\n'), options);\n\n    case 'boolean':\n    case 'number':\n      return comparePrimitive(a, b, options);\n\n    case 'map':\n      return compareObjects(sortMap(a), sortMap(b), options);\n\n    case 'set':\n      return compareObjects(sortSet(a), sortSet(b), options);\n\n    default:\n      return compareObjects(a, b, options);\n  }\n}\n\nfunction comparePrimitive(a, b, options) {\n  const aFormat = (0, _prettyFormat.default)(a, FORMAT_OPTIONS);\n  const bFormat = (0, _prettyFormat.default)(b, FORMAT_OPTIONS);\n  return aFormat === bFormat ? getCommonMessage(_constants.NO_DIFF_MESSAGE, options) : (0, _diffLines.diffLinesUnified)(aFormat.split('\\n'), bFormat.split('\\n'), options);\n}\n\nfunction sortMap(map) {\n  return new Map(Array.from(map.entries()).sort());\n}\n\nfunction sortSet(set) {\n  return new Set(Array.from(set.values()).sort());\n}\n\nfunction compareObjects(a, b, options) {\n  let difference;\n  let hasThrown = false;\n  const noDiffMessage = getCommonMessage(_constants.NO_DIFF_MESSAGE, options);\n\n  try {\n    const aCompare = (0, _prettyFormat.default)(a, FORMAT_OPTIONS_0);\n    const bCompare = (0, _prettyFormat.default)(b, FORMAT_OPTIONS_0);\n\n    if (aCompare === bCompare) {\n      difference = noDiffMessage;\n    } else {\n      const aDisplay = (0, _prettyFormat.default)(a, FORMAT_OPTIONS);\n      const bDisplay = (0, _prettyFormat.default)(b, FORMAT_OPTIONS);\n      difference = (0, _diffLines.diffLinesUnified2)(aDisplay.split('\\n'), bDisplay.split('\\n'), aCompare.split('\\n'), bCompare.split('\\n'), options);\n    }\n  } catch {\n    hasThrown = true;\n  } // If the comparison yields no results, compare again but this time\n  // without calling `toJSON`. It's also possible that toJSON might throw.\n\n\n  if (difference === undefined || difference === noDiffMessage) {\n    const aCompare = (0, _prettyFormat.default)(a, FALLBACK_FORMAT_OPTIONS_0);\n    const bCompare = (0, _prettyFormat.default)(b, FALLBACK_FORMAT_OPTIONS_0);\n\n    if (aCompare === bCompare) {\n      difference = noDiffMessage;\n    } else {\n      const aDisplay = (0, _prettyFormat.default)(a, FALLBACK_FORMAT_OPTIONS);\n      const bDisplay = (0, _prettyFormat.default)(b, FALLBACK_FORMAT_OPTIONS);\n      difference = (0, _diffLines.diffLinesUnified2)(aDisplay.split('\\n'), bDisplay.split('\\n'), aCompare.split('\\n'), bCompare.split('\\n'), options);\n    }\n\n    if (difference !== noDiffMessage && !hasThrown) {\n      difference = getCommonMessage(_constants.SIMILAR_MESSAGE, options) + '\\n\\n' + difference;\n    }\n  }\n\n  return difference;\n}\n\nvar _default = diff;\nexports.default = _default;","map":{"version":3,"sources":["D:/IDEA workspace/ZUA/community-manage-react/node_modules/jest-diff/build/index.js"],"names":["Object","defineProperty","exports","value","enumerable","get","_cleanupSemantic","DIFF_DELETE","DIFF_EQUAL","DIFF_INSERT","Diff","_diffLines","diffLinesRaw","diffLinesUnified","diffLinesUnified2","_printDiffs","diffStringsRaw","diffStringsUnified","default","_chalk","_interopRequireDefault","require","_jestGetType","_prettyFormat","_constants","_normalizeDiffOptions","obj","__esModule","Symbol","global","getCommonMessage","message","options","commonColor","normalizeDiffOptions","AsymmetricMatcher","DOMCollection","DOMElement","Immutable","ReactElement","ReactTestComponent","plugins","PLUGINS","FORMAT_OPTIONS","FORMAT_OPTIONS_0","indent","FALLBACK_FORMAT_OPTIONS","callToJSON","maxDepth","FALLBACK_FORMAT_OPTIONS_0","diff","a","b","is","NO_DIFF_MESSAGE","aType","expectedType","omitDifference","asymmetricMatch","$$typeof","for","getExpectedType","green","red","split","comparePrimitive","compareObjects","sortMap","sortSet","aFormat","bFormat","map","Map","Array","from","entries","sort","set","Set","values","difference","hasThrown","noDiffMessage","aCompare","bCompare","aDisplay","bDisplay","undefined","SIMILAR_MESSAGE","_default"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nObject.defineProperty(exports, 'DIFF_DELETE', {\n  enumerable: true,\n  get: function () {\n    return _cleanupSemantic.DIFF_DELETE;\n  }\n});\nObject.defineProperty(exports, 'DIFF_EQUAL', {\n  enumerable: true,\n  get: function () {\n    return _cleanupSemantic.DIFF_EQUAL;\n  }\n});\nObject.defineProperty(exports, 'DIFF_INSERT', {\n  enumerable: true,\n  get: function () {\n    return _cleanupSemantic.DIFF_INSERT;\n  }\n});\nObject.defineProperty(exports, 'Diff', {\n  enumerable: true,\n  get: function () {\n    return _cleanupSemantic.Diff;\n  }\n});\nObject.defineProperty(exports, 'diffLinesRaw', {\n  enumerable: true,\n  get: function () {\n    return _diffLines.diffLinesRaw;\n  }\n});\nObject.defineProperty(exports, 'diffLinesUnified', {\n  enumerable: true,\n  get: function () {\n    return _diffLines.diffLinesUnified;\n  }\n});\nObject.defineProperty(exports, 'diffLinesUnified2', {\n  enumerable: true,\n  get: function () {\n    return _diffLines.diffLinesUnified2;\n  }\n});\nObject.defineProperty(exports, 'diffStringsRaw', {\n  enumerable: true,\n  get: function () {\n    return _printDiffs.diffStringsRaw;\n  }\n});\nObject.defineProperty(exports, 'diffStringsUnified', {\n  enumerable: true,\n  get: function () {\n    return _printDiffs.diffStringsUnified;\n  }\n});\nexports.default = void 0;\n\nvar _chalk = _interopRequireDefault(require('chalk'));\n\nvar _jestGetType = _interopRequireDefault(require('jest-get-type'));\n\nvar _prettyFormat = _interopRequireDefault(require('pretty-format'));\n\nvar _cleanupSemantic = require('./cleanupSemantic');\n\nvar _constants = require('./constants');\n\nvar _diffLines = require('./diffLines');\n\nvar _normalizeDiffOptions = require('./normalizeDiffOptions');\n\nvar _printDiffs = require('./printDiffs');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\n\nconst getCommonMessage = (message, options) => {\n  const {commonColor} = (0, _normalizeDiffOptions.normalizeDiffOptions)(\n    options\n  );\n  return commonColor(message);\n};\n\nconst {\n  AsymmetricMatcher,\n  DOMCollection,\n  DOMElement,\n  Immutable,\n  ReactElement,\n  ReactTestComponent\n} = _prettyFormat.default.plugins;\nconst PLUGINS = [\n  ReactTestComponent,\n  ReactElement,\n  DOMElement,\n  DOMCollection,\n  Immutable,\n  AsymmetricMatcher\n];\nconst FORMAT_OPTIONS = {\n  plugins: PLUGINS\n};\nconst FORMAT_OPTIONS_0 = {...FORMAT_OPTIONS, indent: 0};\nconst FALLBACK_FORMAT_OPTIONS = {\n  callToJSON: false,\n  maxDepth: 10,\n  plugins: PLUGINS\n};\nconst FALLBACK_FORMAT_OPTIONS_0 = {...FALLBACK_FORMAT_OPTIONS, indent: 0}; // Generate a string that will highlight the difference between two values\n// with green and red. (similar to how github does code diffing)\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nfunction diff(a, b, options) {\n  if (Object.is(a, b)) {\n    return getCommonMessage(_constants.NO_DIFF_MESSAGE, options);\n  }\n\n  const aType = (0, _jestGetType.default)(a);\n  let expectedType = aType;\n  let omitDifference = false;\n\n  if (aType === 'object' && typeof a.asymmetricMatch === 'function') {\n    if (a.$$typeof !== Symbol.for('jest.asymmetricMatcher')) {\n      // Do not know expected type of user-defined asymmetric matcher.\n      return null;\n    }\n\n    if (typeof a.getExpectedType !== 'function') {\n      // For example, expect.anything() matches either null or undefined\n      return null;\n    }\n\n    expectedType = a.getExpectedType(); // Primitive types boolean and number omit difference below.\n    // For example, omit difference for expect.stringMatching(regexp)\n\n    omitDifference = expectedType === 'string';\n  }\n\n  if (expectedType !== (0, _jestGetType.default)(b)) {\n    return (\n      '  Comparing two different types of values.' +\n      ` Expected ${_chalk.default.green(expectedType)} but ` +\n      `received ${_chalk.default.red((0, _jestGetType.default)(b))}.`\n    );\n  }\n\n  if (omitDifference) {\n    return null;\n  }\n\n  switch (aType) {\n    case 'string':\n      return (0, _diffLines.diffLinesUnified)(\n        a.split('\\n'),\n        b.split('\\n'),\n        options\n      );\n\n    case 'boolean':\n    case 'number':\n      return comparePrimitive(a, b, options);\n\n    case 'map':\n      return compareObjects(sortMap(a), sortMap(b), options);\n\n    case 'set':\n      return compareObjects(sortSet(a), sortSet(b), options);\n\n    default:\n      return compareObjects(a, b, options);\n  }\n}\n\nfunction comparePrimitive(a, b, options) {\n  const aFormat = (0, _prettyFormat.default)(a, FORMAT_OPTIONS);\n  const bFormat = (0, _prettyFormat.default)(b, FORMAT_OPTIONS);\n  return aFormat === bFormat\n    ? getCommonMessage(_constants.NO_DIFF_MESSAGE, options)\n    : (0, _diffLines.diffLinesUnified)(\n        aFormat.split('\\n'),\n        bFormat.split('\\n'),\n        options\n      );\n}\n\nfunction sortMap(map) {\n  return new Map(Array.from(map.entries()).sort());\n}\n\nfunction sortSet(set) {\n  return new Set(Array.from(set.values()).sort());\n}\n\nfunction compareObjects(a, b, options) {\n  let difference;\n  let hasThrown = false;\n  const noDiffMessage = getCommonMessage(_constants.NO_DIFF_MESSAGE, options);\n\n  try {\n    const aCompare = (0, _prettyFormat.default)(a, FORMAT_OPTIONS_0);\n    const bCompare = (0, _prettyFormat.default)(b, FORMAT_OPTIONS_0);\n\n    if (aCompare === bCompare) {\n      difference = noDiffMessage;\n    } else {\n      const aDisplay = (0, _prettyFormat.default)(a, FORMAT_OPTIONS);\n      const bDisplay = (0, _prettyFormat.default)(b, FORMAT_OPTIONS);\n      difference = (0, _diffLines.diffLinesUnified2)(\n        aDisplay.split('\\n'),\n        bDisplay.split('\\n'),\n        aCompare.split('\\n'),\n        bCompare.split('\\n'),\n        options\n      );\n    }\n  } catch {\n    hasThrown = true;\n  } // If the comparison yields no results, compare again but this time\n  // without calling `toJSON`. It's also possible that toJSON might throw.\n\n  if (difference === undefined || difference === noDiffMessage) {\n    const aCompare = (0, _prettyFormat.default)(a, FALLBACK_FORMAT_OPTIONS_0);\n    const bCompare = (0, _prettyFormat.default)(b, FALLBACK_FORMAT_OPTIONS_0);\n\n    if (aCompare === bCompare) {\n      difference = noDiffMessage;\n    } else {\n      const aDisplay = (0, _prettyFormat.default)(a, FALLBACK_FORMAT_OPTIONS);\n      const bDisplay = (0, _prettyFormat.default)(b, FALLBACK_FORMAT_OPTIONS);\n      difference = (0, _diffLines.diffLinesUnified2)(\n        aDisplay.split('\\n'),\n        bDisplay.split('\\n'),\n        aCompare.split('\\n'),\n        bCompare.split('\\n'),\n        options\n      );\n    }\n\n    if (difference !== noDiffMessage && !hasThrown) {\n      difference =\n        getCommonMessage(_constants.SIMILAR_MESSAGE, options) +\n        '\\n\\n' +\n        difference;\n    }\n  }\n\n  return difference;\n}\n\nvar _default = diff;\nexports.default = _default;\n"]},"metadata":{},"sourceType":"script"}
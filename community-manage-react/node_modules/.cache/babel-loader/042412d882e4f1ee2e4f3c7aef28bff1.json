{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.separateMessageFromStack = exports.formatResultsErrors = exports.formatStackTrace = exports.getTopFrame = exports.getStackTraceLines = exports.formatExecError = void 0;\n\nvar path = _interopRequireWildcard(require('path'));\n\nvar _codeFrame = require('@babel/code-frame');\n\nvar _chalk = _interopRequireDefault(require('chalk'));\n\nvar fs = _interopRequireWildcard(require('graceful-fs'));\n\nvar _micromatch = _interopRequireDefault(require('micromatch'));\n\nvar _slash = _interopRequireDefault(require('slash'));\n\nvar _stackUtils = _interopRequireDefault(require('stack-utils'));\n\nvar _prettyFormat = _interopRequireDefault(require('pretty-format'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== 'function') return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== 'object' && typeof obj !== 'function') {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar jestReadFile = global[Symbol.for('jest-native-read-file')] || fs.readFileSync; // stack utils tries to create pretty stack by making paths relative.\n\nconst stackUtils = new _stackUtils.default({\n  cwd: 'something which does not exist'\n});\nlet nodeInternals = [];\n\ntry {\n  // https://github.com/tapjs/stack-utils/issues/54\n  nodeInternals = _stackUtils.default.nodeInternals().concat(/\\s*\\(node:/);\n} catch {// `StackUtils.nodeInternals()` fails in browsers. We don't need to remove\n  // node internals in the browser though, so no issue.\n}\n\nconst PATH_NODE_MODULES = `${path.sep}node_modules${path.sep}`;\nconst PATH_JEST_PACKAGES = `${path.sep}jest${path.sep}packages${path.sep}`; // filter for noisy stack trace lines\n\nconst JASMINE_IGNORE = /^\\s+at(?:(?:.jasmine\\-)|\\s+jasmine\\.buildExpectationResult)/;\nconst JEST_INTERNALS_IGNORE = /^\\s+at.*?jest(-.*?)?(\\/|\\\\)(build|node_modules|packages)(\\/|\\\\)/;\nconst ANONYMOUS_FN_IGNORE = /^\\s+at <anonymous>.*$/;\nconst ANONYMOUS_PROMISE_IGNORE = /^\\s+at (new )?Promise \\(<anonymous>\\).*$/;\nconst ANONYMOUS_GENERATOR_IGNORE = /^\\s+at Generator.next \\(<anonymous>\\).*$/;\nconst NATIVE_NEXT_IGNORE = /^\\s+at next \\(native\\).*$/;\nconst TITLE_INDENT = '  ';\nconst MESSAGE_INDENT = '    ';\nconst STACK_INDENT = '      ';\nconst ANCESTRY_SEPARATOR = ' \\u203A ';\n\nconst TITLE_BULLET = _chalk.default.bold('\\u25cf ');\n\nconst STACK_TRACE_COLOR = _chalk.default.dim;\nconst STACK_PATH_REGEXP = /\\s*at.*\\(?(\\:\\d*\\:\\d*|native)\\)?/;\nconst EXEC_ERROR_MESSAGE = 'Test suite failed to run';\nconst NOT_EMPTY_LINE_REGEXP = /^(?!$)/gm;\n\nconst indentAllLines = (lines, indent) => lines.replace(NOT_EMPTY_LINE_REGEXP, indent);\n\nconst trim = string => (string || '').trim(); // Some errors contain not only line numbers in stack traces\n// e.g. SyntaxErrors can contain snippets of code, and we don't\n// want to trim those, because they may have pointers to the column/character\n// which will get misaligned.\n\n\nconst trimPaths = string => string.match(STACK_PATH_REGEXP) ? trim(string) : string;\n\nconst getRenderedCallsite = (fileContent, line, column) => {\n  let renderedCallsite = (0, _codeFrame.codeFrameColumns)(fileContent, {\n    start: {\n      column,\n      line\n    }\n  }, {\n    highlightCode: true\n  });\n  renderedCallsite = indentAllLines(renderedCallsite, MESSAGE_INDENT);\n  renderedCallsite = `\\n${renderedCallsite}\\n`;\n  return renderedCallsite;\n};\n\nconst blankStringRegexp = /^\\s*$/;\n\nfunction checkForCommonEnvironmentErrors(error) {\n  if (error.includes('ReferenceError: document is not defined') || error.includes('ReferenceError: window is not defined') || error.includes('ReferenceError: navigator is not defined')) {\n    return warnAboutWrongTestEnvironment(error, 'jsdom');\n  } else if (error.includes('.unref is not a function')) {\n    return warnAboutWrongTestEnvironment(error, 'node');\n  }\n\n  return error;\n}\n\nfunction warnAboutWrongTestEnvironment(error, env) {\n  return _chalk.default.bold.red(`The error below may be caused by using the wrong test environment, see ${_chalk.default.dim.underline('https://jestjs.io/docs/en/configuration#testenvironment-string')}.\\nConsider using the \"${env}\" test environment.\\n\\n`) + error;\n} // ExecError is an error thrown outside of the test suite (not inside an `it` or\n// `before/after each` hooks). If it's thrown, none of the tests in the file\n// are executed.\n\n\nconst formatExecError = (error, config, options, testPath, reuseMessage) => {\n  if (!error || typeof error === 'number') {\n    error = new Error(`Expected an Error, but \"${String(error)}\" was thrown`);\n    error.stack = '';\n  }\n\n  let message, stack;\n\n  if (typeof error === 'string' || !error) {\n    error || (error = 'EMPTY ERROR');\n    message = '';\n    stack = error;\n  } else {\n    message = error.message;\n    stack = typeof error.stack === 'string' ? error.stack : `thrown: ${(0, _prettyFormat.default)(error, {\n      maxDepth: 3\n    })}`;\n  }\n\n  const separated = separateMessageFromStack(stack || '');\n  stack = separated.stack;\n\n  if (separated.message.includes(trim(message))) {\n    // Often stack trace already contains the duplicate of the message\n    message = separated.message;\n  }\n\n  message = checkForCommonEnvironmentErrors(message);\n  message = indentAllLines(message, MESSAGE_INDENT);\n  stack = stack && !options.noStackTrace ? '\\n' + formatStackTrace(stack, config, options, testPath) : '';\n\n  if (typeof stack !== 'string' || blankStringRegexp.test(message) && blankStringRegexp.test(stack)) {\n    // this can happen if an empty object is thrown.\n    message = `thrown: ${(0, _prettyFormat.default)(error, {\n      maxDepth: 3\n    })}`;\n  }\n\n  let messageToUse;\n\n  if (reuseMessage) {\n    messageToUse = ` ${message.trim()}`;\n  } else {\n    messageToUse = `${EXEC_ERROR_MESSAGE}\\n\\n${message}`;\n  }\n\n  return TITLE_INDENT + TITLE_BULLET + messageToUse + stack + '\\n';\n};\n\nexports.formatExecError = formatExecError;\n\nconst removeInternalStackEntries = (lines, options) => {\n  let pathCounter = 0;\n  return lines.filter(line => {\n    if (ANONYMOUS_FN_IGNORE.test(line)) {\n      return false;\n    }\n\n    if (ANONYMOUS_PROMISE_IGNORE.test(line)) {\n      return false;\n    }\n\n    if (ANONYMOUS_GENERATOR_IGNORE.test(line)) {\n      return false;\n    }\n\n    if (NATIVE_NEXT_IGNORE.test(line)) {\n      return false;\n    }\n\n    if (nodeInternals.some(internal => internal.test(line))) {\n      return false;\n    }\n\n    if (!STACK_PATH_REGEXP.test(line)) {\n      return true;\n    }\n\n    if (JASMINE_IGNORE.test(line)) {\n      return false;\n    }\n\n    if (++pathCounter === 1) {\n      return true; // always keep the first line even if it's from Jest\n    }\n\n    if (options.noStackTrace) {\n      return false;\n    }\n\n    if (JEST_INTERNALS_IGNORE.test(line)) {\n      return false;\n    }\n\n    return true;\n  });\n};\n\nconst formatPaths = (config, relativeTestPath, line) => {\n  // Extract the file path from the trace line.\n  const match = line.match(/(^\\s*at .*?\\(?)([^()]+)(:[0-9]+:[0-9]+\\)?.*$)/);\n\n  if (!match) {\n    return line;\n  }\n\n  let filePath = (0, _slash.default)(path.relative(config.rootDir, match[2])); // highlight paths from the current test file\n\n  if (config.testMatch && config.testMatch.length && (0, _micromatch.default)([filePath], config.testMatch).length > 0 || filePath === relativeTestPath) {\n    filePath = _chalk.default.reset.cyan(filePath);\n  }\n\n  return STACK_TRACE_COLOR(match[1]) + filePath + STACK_TRACE_COLOR(match[3]);\n};\n\nconst getStackTraceLines = (stack, options = {\n  noCodeFrame: false,\n  noStackTrace: false\n}) => removeInternalStackEntries(stack.split(/\\n/), options);\n\nexports.getStackTraceLines = getStackTraceLines;\n\nconst getTopFrame = lines => {\n  for (const line of lines) {\n    if (line.includes(PATH_NODE_MODULES) || line.includes(PATH_JEST_PACKAGES)) {\n      continue;\n    }\n\n    const parsedFrame = stackUtils.parseLine(line.trim());\n\n    if (parsedFrame && parsedFrame.file) {\n      return parsedFrame;\n    }\n  }\n\n  return null;\n};\n\nexports.getTopFrame = getTopFrame;\n\nconst formatStackTrace = (stack, config, options, testPath) => {\n  const lines = getStackTraceLines(stack, options);\n  let renderedCallsite = '';\n  const relativeTestPath = testPath ? (0, _slash.default)(path.relative(config.rootDir, testPath)) : null;\n\n  if (!options.noStackTrace && !options.noCodeFrame) {\n    const topFrame = getTopFrame(lines);\n\n    if (topFrame) {\n      const {\n        column,\n        file: filename,\n        line\n      } = topFrame;\n\n      if (line && filename && path.isAbsolute(filename)) {\n        let fileContent;\n\n        try {\n          // TODO: check & read HasteFS instead of reading the filesystem:\n          // see: https://github.com/facebook/jest/pull/5405#discussion_r164281696\n          fileContent = jestReadFile(filename, 'utf8');\n          renderedCallsite = getRenderedCallsite(fileContent, line, column);\n        } catch {// the file does not exist or is inaccessible, we ignore\n        }\n      }\n    }\n  }\n\n  const stacktrace = lines.filter(Boolean).map(line => STACK_INDENT + formatPaths(config, relativeTestPath, trimPaths(line))).join('\\n');\n  return renderedCallsite ? `${renderedCallsite}\\n${stacktrace}` : `\\n${stacktrace}`;\n};\n\nexports.formatStackTrace = formatStackTrace;\n\nconst formatResultsErrors = (testResults, config, options, testPath) => {\n  const failedResults = testResults.reduce((errors, result) => {\n    result.failureMessages.map(checkForCommonEnvironmentErrors).forEach(content => errors.push({\n      content,\n      result\n    }));\n    return errors;\n  }, []);\n\n  if (!failedResults.length) {\n    return null;\n  }\n\n  return failedResults.map(({\n    result,\n    content\n  }) => {\n    let {\n      message,\n      stack\n    } = separateMessageFromStack(content);\n    stack = options.noStackTrace ? '' : STACK_TRACE_COLOR(formatStackTrace(stack, config, options, testPath)) + '\\n';\n    message = indentAllLines(message, MESSAGE_INDENT);\n    const title = _chalk.default.bold.red(TITLE_INDENT + TITLE_BULLET + result.ancestorTitles.join(ANCESTRY_SEPARATOR) + (result.ancestorTitles.length ? ANCESTRY_SEPARATOR : '') + result.title) + '\\n';\n    return title + '\\n' + message + '\\n' + stack;\n  }).join('\\n');\n};\n\nexports.formatResultsErrors = formatResultsErrors;\nconst errorRegexp = /^Error:?\\s*$/;\n\nconst removeBlankErrorLine = str => str.split('\\n') // Lines saying just `Error:` are useless\n.filter(line => !errorRegexp.test(line)).join('\\n').trimRight(); // jasmine and worker farm sometimes don't give us access to the actual\n// Error object, so we have to regexp out the message from the stack string\n// to format it.\n\n\nconst separateMessageFromStack = content => {\n  if (!content) {\n    return {\n      message: '',\n      stack: ''\n    };\n  } // All lines up to what looks like a stack -- or if nothing looks like a stack\n  // (maybe it's a code frame instead), just the first non-empty line.\n  // If the error is a plain \"Error:\" instead of a SyntaxError or TypeError we\n  // remove the prefix from the message because it is generally not useful.\n\n\n  const messageMatch = content.match(/^(?:Error: )?([\\s\\S]*?(?=\\n\\s*at\\s.*:\\d*:\\d*)|\\s*.*)([\\s\\S]*)$/);\n\n  if (!messageMatch) {\n    // For typescript\n    throw new Error('If you hit this error, the regex above is buggy.');\n  }\n\n  const message = removeBlankErrorLine(messageMatch[1]);\n  const stack = removeBlankErrorLine(messageMatch[2]);\n  return {\n    message,\n    stack\n  };\n};\n\nexports.separateMessageFromStack = separateMessageFromStack;","map":{"version":3,"sources":["D:/IDEA workspace/ZUA/community-manage-react/node_modules/jest-message-util/build/index.js"],"names":["Object","defineProperty","exports","value","separateMessageFromStack","formatResultsErrors","formatStackTrace","getTopFrame","getStackTraceLines","formatExecError","path","_interopRequireWildcard","require","_codeFrame","_chalk","_interopRequireDefault","fs","_micromatch","_slash","_stackUtils","_prettyFormat","obj","__esModule","default","_getRequireWildcardCache","WeakMap","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","Symbol","global","jestReadFile","for","readFileSync","stackUtils","cwd","nodeInternals","concat","PATH_NODE_MODULES","sep","PATH_JEST_PACKAGES","JASMINE_IGNORE","JEST_INTERNALS_IGNORE","ANONYMOUS_FN_IGNORE","ANONYMOUS_PROMISE_IGNORE","ANONYMOUS_GENERATOR_IGNORE","NATIVE_NEXT_IGNORE","TITLE_INDENT","MESSAGE_INDENT","STACK_INDENT","ANCESTRY_SEPARATOR","TITLE_BULLET","bold","STACK_TRACE_COLOR","dim","STACK_PATH_REGEXP","EXEC_ERROR_MESSAGE","NOT_EMPTY_LINE_REGEXP","indentAllLines","lines","indent","replace","trim","string","trimPaths","match","getRenderedCallsite","fileContent","line","column","renderedCallsite","codeFrameColumns","start","highlightCode","blankStringRegexp","checkForCommonEnvironmentErrors","error","includes","warnAboutWrongTestEnvironment","env","red","underline","config","options","testPath","reuseMessage","Error","String","stack","message","maxDepth","separated","noStackTrace","test","messageToUse","removeInternalStackEntries","pathCounter","filter","some","internal","formatPaths","relativeTestPath","filePath","relative","rootDir","testMatch","length","reset","cyan","noCodeFrame","split","parsedFrame","parseLine","file","topFrame","filename","isAbsolute","stacktrace","Boolean","map","join","testResults","failedResults","reduce","errors","result","failureMessages","forEach","content","push","title","ancestorTitles","errorRegexp","removeBlankErrorLine","str","trimRight","messageMatch"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.separateMessageFromStack = exports.formatResultsErrors = exports.formatStackTrace = exports.getTopFrame = exports.getStackTraceLines = exports.formatExecError = void 0;\n\nvar path = _interopRequireWildcard(require('path'));\n\nvar _codeFrame = require('@babel/code-frame');\n\nvar _chalk = _interopRequireDefault(require('chalk'));\n\nvar fs = _interopRequireWildcard(require('graceful-fs'));\n\nvar _micromatch = _interopRequireDefault(require('micromatch'));\n\nvar _slash = _interopRequireDefault(require('slash'));\n\nvar _stackUtils = _interopRequireDefault(require('stack-utils'));\n\nvar _prettyFormat = _interopRequireDefault(require('pretty-format'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== 'function') return null;\n  var cache = new WeakMap();\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    return {default: obj};\n  }\n  var cache = _getRequireWildcardCache();\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor =\n    Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor\n        ? Object.getOwnPropertyDescriptor(obj, key)\n        : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\n\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar jestReadFile =\n  global[Symbol.for('jest-native-read-file')] || fs.readFileSync;\n// stack utils tries to create pretty stack by making paths relative.\nconst stackUtils = new _stackUtils.default({\n  cwd: 'something which does not exist'\n});\nlet nodeInternals = [];\n\ntry {\n  // https://github.com/tapjs/stack-utils/issues/54\n  nodeInternals = _stackUtils.default.nodeInternals().concat(/\\s*\\(node:/);\n} catch {\n  // `StackUtils.nodeInternals()` fails in browsers. We don't need to remove\n  // node internals in the browser though, so no issue.\n}\n\nconst PATH_NODE_MODULES = `${path.sep}node_modules${path.sep}`;\nconst PATH_JEST_PACKAGES = `${path.sep}jest${path.sep}packages${path.sep}`; // filter for noisy stack trace lines\n\nconst JASMINE_IGNORE = /^\\s+at(?:(?:.jasmine\\-)|\\s+jasmine\\.buildExpectationResult)/;\nconst JEST_INTERNALS_IGNORE = /^\\s+at.*?jest(-.*?)?(\\/|\\\\)(build|node_modules|packages)(\\/|\\\\)/;\nconst ANONYMOUS_FN_IGNORE = /^\\s+at <anonymous>.*$/;\nconst ANONYMOUS_PROMISE_IGNORE = /^\\s+at (new )?Promise \\(<anonymous>\\).*$/;\nconst ANONYMOUS_GENERATOR_IGNORE = /^\\s+at Generator.next \\(<anonymous>\\).*$/;\nconst NATIVE_NEXT_IGNORE = /^\\s+at next \\(native\\).*$/;\nconst TITLE_INDENT = '  ';\nconst MESSAGE_INDENT = '    ';\nconst STACK_INDENT = '      ';\nconst ANCESTRY_SEPARATOR = ' \\u203A ';\n\nconst TITLE_BULLET = _chalk.default.bold('\\u25cf ');\n\nconst STACK_TRACE_COLOR = _chalk.default.dim;\nconst STACK_PATH_REGEXP = /\\s*at.*\\(?(\\:\\d*\\:\\d*|native)\\)?/;\nconst EXEC_ERROR_MESSAGE = 'Test suite failed to run';\nconst NOT_EMPTY_LINE_REGEXP = /^(?!$)/gm;\n\nconst indentAllLines = (lines, indent) =>\n  lines.replace(NOT_EMPTY_LINE_REGEXP, indent);\n\nconst trim = string => (string || '').trim(); // Some errors contain not only line numbers in stack traces\n// e.g. SyntaxErrors can contain snippets of code, and we don't\n// want to trim those, because they may have pointers to the column/character\n// which will get misaligned.\n\nconst trimPaths = string =>\n  string.match(STACK_PATH_REGEXP) ? trim(string) : string;\n\nconst getRenderedCallsite = (fileContent, line, column) => {\n  let renderedCallsite = (0, _codeFrame.codeFrameColumns)(\n    fileContent,\n    {\n      start: {\n        column,\n        line\n      }\n    },\n    {\n      highlightCode: true\n    }\n  );\n  renderedCallsite = indentAllLines(renderedCallsite, MESSAGE_INDENT);\n  renderedCallsite = `\\n${renderedCallsite}\\n`;\n  return renderedCallsite;\n};\n\nconst blankStringRegexp = /^\\s*$/;\n\nfunction checkForCommonEnvironmentErrors(error) {\n  if (\n    error.includes('ReferenceError: document is not defined') ||\n    error.includes('ReferenceError: window is not defined') ||\n    error.includes('ReferenceError: navigator is not defined')\n  ) {\n    return warnAboutWrongTestEnvironment(error, 'jsdom');\n  } else if (error.includes('.unref is not a function')) {\n    return warnAboutWrongTestEnvironment(error, 'node');\n  }\n\n  return error;\n}\n\nfunction warnAboutWrongTestEnvironment(error, env) {\n  return (\n    _chalk.default.bold.red(\n      `The error below may be caused by using the wrong test environment, see ${_chalk.default.dim.underline(\n        'https://jestjs.io/docs/en/configuration#testenvironment-string'\n      )}.\\nConsider using the \"${env}\" test environment.\\n\\n`\n    ) + error\n  );\n} // ExecError is an error thrown outside of the test suite (not inside an `it` or\n// `before/after each` hooks). If it's thrown, none of the tests in the file\n// are executed.\n\nconst formatExecError = (error, config, options, testPath, reuseMessage) => {\n  if (!error || typeof error === 'number') {\n    error = new Error(`Expected an Error, but \"${String(error)}\" was thrown`);\n    error.stack = '';\n  }\n\n  let message, stack;\n\n  if (typeof error === 'string' || !error) {\n    error || (error = 'EMPTY ERROR');\n    message = '';\n    stack = error;\n  } else {\n    message = error.message;\n    stack =\n      typeof error.stack === 'string'\n        ? error.stack\n        : `thrown: ${(0, _prettyFormat.default)(error, {\n            maxDepth: 3\n          })}`;\n  }\n\n  const separated = separateMessageFromStack(stack || '');\n  stack = separated.stack;\n\n  if (separated.message.includes(trim(message))) {\n    // Often stack trace already contains the duplicate of the message\n    message = separated.message;\n  }\n\n  message = checkForCommonEnvironmentErrors(message);\n  message = indentAllLines(message, MESSAGE_INDENT);\n  stack =\n    stack && !options.noStackTrace\n      ? '\\n' + formatStackTrace(stack, config, options, testPath)\n      : '';\n\n  if (\n    typeof stack !== 'string' ||\n    (blankStringRegexp.test(message) && blankStringRegexp.test(stack))\n  ) {\n    // this can happen if an empty object is thrown.\n    message = `thrown: ${(0, _prettyFormat.default)(error, {\n      maxDepth: 3\n    })}`;\n  }\n\n  let messageToUse;\n\n  if (reuseMessage) {\n    messageToUse = ` ${message.trim()}`;\n  } else {\n    messageToUse = `${EXEC_ERROR_MESSAGE}\\n\\n${message}`;\n  }\n\n  return TITLE_INDENT + TITLE_BULLET + messageToUse + stack + '\\n';\n};\n\nexports.formatExecError = formatExecError;\n\nconst removeInternalStackEntries = (lines, options) => {\n  let pathCounter = 0;\n  return lines.filter(line => {\n    if (ANONYMOUS_FN_IGNORE.test(line)) {\n      return false;\n    }\n\n    if (ANONYMOUS_PROMISE_IGNORE.test(line)) {\n      return false;\n    }\n\n    if (ANONYMOUS_GENERATOR_IGNORE.test(line)) {\n      return false;\n    }\n\n    if (NATIVE_NEXT_IGNORE.test(line)) {\n      return false;\n    }\n\n    if (nodeInternals.some(internal => internal.test(line))) {\n      return false;\n    }\n\n    if (!STACK_PATH_REGEXP.test(line)) {\n      return true;\n    }\n\n    if (JASMINE_IGNORE.test(line)) {\n      return false;\n    }\n\n    if (++pathCounter === 1) {\n      return true; // always keep the first line even if it's from Jest\n    }\n\n    if (options.noStackTrace) {\n      return false;\n    }\n\n    if (JEST_INTERNALS_IGNORE.test(line)) {\n      return false;\n    }\n\n    return true;\n  });\n};\n\nconst formatPaths = (config, relativeTestPath, line) => {\n  // Extract the file path from the trace line.\n  const match = line.match(/(^\\s*at .*?\\(?)([^()]+)(:[0-9]+:[0-9]+\\)?.*$)/);\n\n  if (!match) {\n    return line;\n  }\n\n  let filePath = (0, _slash.default)(path.relative(config.rootDir, match[2])); // highlight paths from the current test file\n\n  if (\n    (config.testMatch &&\n      config.testMatch.length &&\n      (0, _micromatch.default)([filePath], config.testMatch).length > 0) ||\n    filePath === relativeTestPath\n  ) {\n    filePath = _chalk.default.reset.cyan(filePath);\n  }\n\n  return STACK_TRACE_COLOR(match[1]) + filePath + STACK_TRACE_COLOR(match[3]);\n};\n\nconst getStackTraceLines = (\n  stack,\n  options = {\n    noCodeFrame: false,\n    noStackTrace: false\n  }\n) => removeInternalStackEntries(stack.split(/\\n/), options);\n\nexports.getStackTraceLines = getStackTraceLines;\n\nconst getTopFrame = lines => {\n  for (const line of lines) {\n    if (line.includes(PATH_NODE_MODULES) || line.includes(PATH_JEST_PACKAGES)) {\n      continue;\n    }\n\n    const parsedFrame = stackUtils.parseLine(line.trim());\n\n    if (parsedFrame && parsedFrame.file) {\n      return parsedFrame;\n    }\n  }\n\n  return null;\n};\n\nexports.getTopFrame = getTopFrame;\n\nconst formatStackTrace = (stack, config, options, testPath) => {\n  const lines = getStackTraceLines(stack, options);\n  let renderedCallsite = '';\n  const relativeTestPath = testPath\n    ? (0, _slash.default)(path.relative(config.rootDir, testPath))\n    : null;\n\n  if (!options.noStackTrace && !options.noCodeFrame) {\n    const topFrame = getTopFrame(lines);\n\n    if (topFrame) {\n      const {column, file: filename, line} = topFrame;\n\n      if (line && filename && path.isAbsolute(filename)) {\n        let fileContent;\n\n        try {\n          // TODO: check & read HasteFS instead of reading the filesystem:\n          // see: https://github.com/facebook/jest/pull/5405#discussion_r164281696\n          fileContent = jestReadFile(filename, 'utf8');\n          renderedCallsite = getRenderedCallsite(fileContent, line, column);\n        } catch {\n          // the file does not exist or is inaccessible, we ignore\n        }\n      }\n    }\n  }\n\n  const stacktrace = lines\n    .filter(Boolean)\n    .map(\n      line =>\n        STACK_INDENT + formatPaths(config, relativeTestPath, trimPaths(line))\n    )\n    .join('\\n');\n  return renderedCallsite\n    ? `${renderedCallsite}\\n${stacktrace}`\n    : `\\n${stacktrace}`;\n};\n\nexports.formatStackTrace = formatStackTrace;\n\nconst formatResultsErrors = (testResults, config, options, testPath) => {\n  const failedResults = testResults.reduce((errors, result) => {\n    result.failureMessages\n      .map(checkForCommonEnvironmentErrors)\n      .forEach(content =>\n        errors.push({\n          content,\n          result\n        })\n      );\n    return errors;\n  }, []);\n\n  if (!failedResults.length) {\n    return null;\n  }\n\n  return failedResults\n    .map(({result, content}) => {\n      let {message, stack} = separateMessageFromStack(content);\n      stack = options.noStackTrace\n        ? ''\n        : STACK_TRACE_COLOR(\n            formatStackTrace(stack, config, options, testPath)\n          ) + '\\n';\n      message = indentAllLines(message, MESSAGE_INDENT);\n      const title =\n        _chalk.default.bold.red(\n          TITLE_INDENT +\n            TITLE_BULLET +\n            result.ancestorTitles.join(ANCESTRY_SEPARATOR) +\n            (result.ancestorTitles.length ? ANCESTRY_SEPARATOR : '') +\n            result.title\n        ) + '\\n';\n      return title + '\\n' + message + '\\n' + stack;\n    })\n    .join('\\n');\n};\n\nexports.formatResultsErrors = formatResultsErrors;\nconst errorRegexp = /^Error:?\\s*$/;\n\nconst removeBlankErrorLine = str =>\n  str\n    .split('\\n') // Lines saying just `Error:` are useless\n    .filter(line => !errorRegexp.test(line))\n    .join('\\n')\n    .trimRight(); // jasmine and worker farm sometimes don't give us access to the actual\n// Error object, so we have to regexp out the message from the stack string\n// to format it.\n\nconst separateMessageFromStack = content => {\n  if (!content) {\n    return {\n      message: '',\n      stack: ''\n    };\n  } // All lines up to what looks like a stack -- or if nothing looks like a stack\n  // (maybe it's a code frame instead), just the first non-empty line.\n  // If the error is a plain \"Error:\" instead of a SyntaxError or TypeError we\n  // remove the prefix from the message because it is generally not useful.\n\n  const messageMatch = content.match(\n    /^(?:Error: )?([\\s\\S]*?(?=\\n\\s*at\\s.*:\\d*:\\d*)|\\s*.*)([\\s\\S]*)$/\n  );\n\n  if (!messageMatch) {\n    // For typescript\n    throw new Error('If you hit this error, the regex above is buggy.');\n  }\n\n  const message = removeBlankErrorLine(messageMatch[1]);\n  const stack = removeBlankErrorLine(messageMatch[2]);\n  return {\n    message,\n    stack\n  };\n};\n\nexports.separateMessageFromStack = separateMessageFromStack;\n"]},"metadata":{},"sourceType":"script"}
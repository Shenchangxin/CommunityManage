{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.setMatchers = exports.getMatchers = exports.setState = exports.getState = exports.INTERNAL_MATCHER_FLAG = void 0;\n\nvar _asymmetricMatchers = require('./asymmetricMatchers');\n\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol; // Global matchers object holds the list of available matchers and\n// the state, that can hold matcher specific values that change over time.\n\nconst JEST_MATCHERS_OBJECT = Symbol.for('$$jest-matchers-object'); // Notes a built-in/internal Jest matcher.\n// Jest may override the stack trace of Errors thrown by internal matchers.\n\nconst INTERNAL_MATCHER_FLAG = Symbol.for('$$jest-internal-matcher');\nexports.INTERNAL_MATCHER_FLAG = INTERNAL_MATCHER_FLAG;\n\nif (!global.hasOwnProperty(JEST_MATCHERS_OBJECT)) {\n  const defaultState = {\n    assertionCalls: 0,\n    expectedAssertionsNumber: null,\n    isExpectingAssertions: false,\n    suppressedErrors: [] // errors that are not thrown immediately.\n\n  };\n  Object.defineProperty(global, JEST_MATCHERS_OBJECT, {\n    value: {\n      matchers: Object.create(null),\n      state: defaultState\n    }\n  });\n}\n\nconst getState = () => global[JEST_MATCHERS_OBJECT].state;\n\nexports.getState = getState;\n\nconst setState = state => {\n  Object.assign(global[JEST_MATCHERS_OBJECT].state, state);\n};\n\nexports.setState = setState;\n\nconst getMatchers = () => global[JEST_MATCHERS_OBJECT].matchers;\n\nexports.getMatchers = getMatchers;\n\nconst setMatchers = (matchers, isInternal, expect) => {\n  Object.keys(matchers).forEach(key => {\n    const matcher = matchers[key];\n    Object.defineProperty(matcher, INTERNAL_MATCHER_FLAG, {\n      value: isInternal\n    });\n\n    if (!isInternal) {\n      // expect is defined\n      class CustomMatcher extends _asymmetricMatchers.AsymmetricMatcher {\n        constructor(inverse = false, ...sample) {\n          super(sample);\n          this.inverse = inverse;\n        }\n\n        asymmetricMatch(other) {\n          const {\n            pass\n          } = matcher(other, ...this.sample);\n          return this.inverse ? !pass : pass;\n        }\n\n        toString() {\n          return `${this.inverse ? 'not.' : ''}${key}`;\n        }\n\n        getExpectedType() {\n          return 'any';\n        }\n\n        toAsymmetricMatcher() {\n          return `${this.toString()}<${this.sample.map(String).join(', ')}>`;\n        }\n\n      }\n\n      expect[key] = (...sample) => new CustomMatcher(false, ...sample);\n\n      if (!expect.not) {\n        expect.not = {};\n      }\n\n      expect.not[key] = (...sample) => new CustomMatcher(true, ...sample);\n    }\n  });\n  Object.assign(global[JEST_MATCHERS_OBJECT].matchers, matchers);\n};\n\nexports.setMatchers = setMatchers;","map":{"version":3,"sources":["D:/IDEA workspace/ZUA/community-manage-react/node_modules/expect/build/jestMatchersObject.js"],"names":["Object","defineProperty","exports","value","setMatchers","getMatchers","setState","getState","INTERNAL_MATCHER_FLAG","_asymmetricMatchers","require","Symbol","global","JEST_MATCHERS_OBJECT","for","hasOwnProperty","defaultState","assertionCalls","expectedAssertionsNumber","isExpectingAssertions","suppressedErrors","matchers","create","state","assign","isInternal","expect","keys","forEach","key","matcher","CustomMatcher","AsymmetricMatcher","constructor","inverse","sample","asymmetricMatch","other","pass","toString","getExpectedType","toAsymmetricMatcher","map","String","join","not"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.setMatchers = exports.getMatchers = exports.setState = exports.getState = exports.INTERNAL_MATCHER_FLAG = void 0;\n\nvar _asymmetricMatchers = require('./asymmetricMatchers');\n\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\n// Global matchers object holds the list of available matchers and\n// the state, that can hold matcher specific values that change over time.\nconst JEST_MATCHERS_OBJECT = Symbol.for('$$jest-matchers-object'); // Notes a built-in/internal Jest matcher.\n// Jest may override the stack trace of Errors thrown by internal matchers.\n\nconst INTERNAL_MATCHER_FLAG = Symbol.for('$$jest-internal-matcher');\nexports.INTERNAL_MATCHER_FLAG = INTERNAL_MATCHER_FLAG;\n\nif (!global.hasOwnProperty(JEST_MATCHERS_OBJECT)) {\n  const defaultState = {\n    assertionCalls: 0,\n    expectedAssertionsNumber: null,\n    isExpectingAssertions: false,\n    suppressedErrors: [] // errors that are not thrown immediately.\n  };\n  Object.defineProperty(global, JEST_MATCHERS_OBJECT, {\n    value: {\n      matchers: Object.create(null),\n      state: defaultState\n    }\n  });\n}\n\nconst getState = () => global[JEST_MATCHERS_OBJECT].state;\n\nexports.getState = getState;\n\nconst setState = state => {\n  Object.assign(global[JEST_MATCHERS_OBJECT].state, state);\n};\n\nexports.setState = setState;\n\nconst getMatchers = () => global[JEST_MATCHERS_OBJECT].matchers;\n\nexports.getMatchers = getMatchers;\n\nconst setMatchers = (matchers, isInternal, expect) => {\n  Object.keys(matchers).forEach(key => {\n    const matcher = matchers[key];\n    Object.defineProperty(matcher, INTERNAL_MATCHER_FLAG, {\n      value: isInternal\n    });\n\n    if (!isInternal) {\n      // expect is defined\n      class CustomMatcher extends _asymmetricMatchers.AsymmetricMatcher {\n        constructor(inverse = false, ...sample) {\n          super(sample);\n          this.inverse = inverse;\n        }\n\n        asymmetricMatch(other) {\n          const {pass} = matcher(other, ...this.sample);\n          return this.inverse ? !pass : pass;\n        }\n\n        toString() {\n          return `${this.inverse ? 'not.' : ''}${key}`;\n        }\n\n        getExpectedType() {\n          return 'any';\n        }\n\n        toAsymmetricMatcher() {\n          return `${this.toString()}<${this.sample.map(String).join(', ')}>`;\n        }\n      }\n\n      expect[key] = (...sample) => new CustomMatcher(false, ...sample);\n\n      if (!expect.not) {\n        expect.not = {};\n      }\n\n      expect.not[key] = (...sample) => new CustomMatcher(true, ...sample);\n    }\n  });\n  Object.assign(global[JEST_MATCHERS_OBJECT].matchers, matchers);\n};\n\nexports.setMatchers = setMatchers;\n"]},"metadata":{},"sourceType":"script"}
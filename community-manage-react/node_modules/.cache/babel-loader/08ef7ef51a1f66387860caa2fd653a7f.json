{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = formatTime;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction formatTime(time, prefixPower = -3, padLeftLength = 0) {\n  const prefixes = ['n', 'μ', 'm', ''];\n  const prefixIndex = Math.max(0, Math.min(Math.trunc(prefixPower / 3) + prefixes.length - 1, prefixes.length - 1));\n  return `${String(time).padStart(padLeftLength)} ${prefixes[prefixIndex]}s`;\n}","map":{"version":3,"sources":["D:/IDEA workspace/ZUA/community-manage-react/node_modules/jest-util/build/formatTime.js"],"names":["Object","defineProperty","exports","value","default","formatTime","time","prefixPower","padLeftLength","prefixes","prefixIndex","Math","max","min","trunc","length","String","padStart"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,UAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,UAAT,CAAoBC,IAApB,EAA0BC,WAAW,GAAG,CAAC,CAAzC,EAA4CC,aAAa,GAAG,CAA5D,EAA+D;AAC7D,QAAMC,QAAQ,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,EAAhB,CAAjB;AACA,QAAMC,WAAW,GAAGC,IAAI,CAACC,GAAL,CAClB,CADkB,EAElBD,IAAI,CAACE,GAAL,CACEF,IAAI,CAACG,KAAL,CAAWP,WAAW,GAAG,CAAzB,IAA8BE,QAAQ,CAACM,MAAvC,GAAgD,CADlD,EAEEN,QAAQ,CAACM,MAAT,GAAkB,CAFpB,CAFkB,CAApB;AAOA,SAAQ,GAAEC,MAAM,CAACV,IAAD,CAAN,CAAaW,QAAb,CAAsBT,aAAtB,CAAqC,IAAGC,QAAQ,CAACC,WAAD,CAAc,GAAxE;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = formatTime;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nfunction formatTime(time, prefixPower = -3, padLeftLength = 0) {\n  const prefixes = ['n', 'μ', 'm', ''];\n  const prefixIndex = Math.max(\n    0,\n    Math.min(\n      Math.trunc(prefixPower / 3) + prefixes.length - 1,\n      prefixes.length - 1\n    )\n  );\n  return `${String(time).padStart(padLeftLength)} ${prefixes[prefixIndex]}s`;\n}\n"]},"metadata":{},"sourceType":"script"}
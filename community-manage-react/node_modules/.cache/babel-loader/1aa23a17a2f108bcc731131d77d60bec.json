{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _jestGetType = _interopRequireDefault(require('jest-get-type'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst supportTypes = ['map', 'array', 'object'];\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nclass Replaceable {\n  constructor(object) {\n    _defineProperty(this, 'object', void 0);\n\n    _defineProperty(this, 'type', void 0);\n\n    this.object = object;\n    this.type = (0, _jestGetType.default)(object);\n\n    if (!supportTypes.includes(this.type)) {\n      throw new Error(`Type ${this.type} is not support in Replaceable!`);\n    }\n  }\n\n  static isReplaceable(obj1, obj2) {\n    const obj1Type = (0, _jestGetType.default)(obj1);\n    const obj2Type = (0, _jestGetType.default)(obj2);\n    return obj1Type === obj2Type && supportTypes.includes(obj1Type);\n  }\n\n  forEach(cb) {\n    if (this.type === 'object') {\n      const descriptors = Object.getOwnPropertyDescriptors(this.object);\n      [...Object.keys(descriptors), ...Object.getOwnPropertySymbols(descriptors)] //@ts-expect-error because typescript do not support symbol key in object\n      //https://github.com/microsoft/TypeScript/issues/1863\n      .filter(key => descriptors[key].enumerable).forEach(key => {\n        cb(this.object[key], key, this.object);\n      });\n    } else {\n      this.object.forEach(cb);\n    }\n  }\n\n  get(key) {\n    if (this.type === 'map') {\n      return this.object.get(key);\n    }\n\n    return this.object[key];\n  }\n\n  set(key, value) {\n    if (this.type === 'map') {\n      this.object.set(key, value);\n    } else {\n      this.object[key] = value;\n    }\n  }\n\n}\n/* eslint-enable */\n\n\nexports.default = Replaceable;","map":{"version":3,"sources":["D:/IDEA workspace/ZUA/community-manage-react/node_modules/jest-matcher-utils/build/Replaceable.js"],"names":["Object","defineProperty","exports","value","default","_jestGetType","_interopRequireDefault","require","obj","__esModule","_defineProperty","key","enumerable","configurable","writable","supportTypes","Replaceable","constructor","object","type","includes","Error","isReplaceable","obj1","obj2","obj1Type","obj2Type","forEach","cb","descriptors","getOwnPropertyDescriptors","keys","getOwnPropertySymbols","filter","get","set"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _jestGetType = _interopRequireDefault(require('jest-get-type'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nconst supportTypes = ['map', 'array', 'object'];\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nclass Replaceable {\n  constructor(object) {\n    _defineProperty(this, 'object', void 0);\n\n    _defineProperty(this, 'type', void 0);\n\n    this.object = object;\n    this.type = (0, _jestGetType.default)(object);\n\n    if (!supportTypes.includes(this.type)) {\n      throw new Error(`Type ${this.type} is not support in Replaceable!`);\n    }\n  }\n\n  static isReplaceable(obj1, obj2) {\n    const obj1Type = (0, _jestGetType.default)(obj1);\n    const obj2Type = (0, _jestGetType.default)(obj2);\n    return obj1Type === obj2Type && supportTypes.includes(obj1Type);\n  }\n\n  forEach(cb) {\n    if (this.type === 'object') {\n      const descriptors = Object.getOwnPropertyDescriptors(this.object);\n      [\n        ...Object.keys(descriptors),\n        ...Object.getOwnPropertySymbols(descriptors)\n      ] //@ts-expect-error because typescript do not support symbol key in object\n        //https://github.com/microsoft/TypeScript/issues/1863\n        .filter(key => descriptors[key].enumerable)\n        .forEach(key => {\n          cb(this.object[key], key, this.object);\n        });\n    } else {\n      this.object.forEach(cb);\n    }\n  }\n\n  get(key) {\n    if (this.type === 'map') {\n      return this.object.get(key);\n    }\n\n    return this.object[key];\n  }\n\n  set(key, value) {\n    if (this.type === 'map') {\n      this.object.set(key, value);\n    } else {\n      this.object[key] = value;\n    }\n  }\n}\n/* eslint-enable */\n\nexports.default = Replaceable;\n"]},"metadata":{},"sourceType":"script"}
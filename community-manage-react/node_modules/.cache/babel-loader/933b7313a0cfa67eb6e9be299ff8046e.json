{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.diffLinesRaw = exports.diffLinesUnified2 = exports.diffLinesUnified = void 0;\n\nvar _diffSequences = _interopRequireDefault(require('diff-sequences'));\n\nvar _cleanupSemantic = require('./cleanupSemantic');\n\nvar _normalizeDiffOptions = require('./normalizeDiffOptions');\n\nvar _printDiffs = require('./printDiffs');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst isEmptyString = lines => lines.length === 1 && lines[0].length === 0; // Compare two arrays of strings line-by-line. Format as comparison lines.\n\n\nconst diffLinesUnified = (aLines, bLines, options) => (0, _printDiffs.printDiffLines)(diffLinesRaw(isEmptyString(aLines) ? [] : aLines, isEmptyString(bLines) ? [] : bLines), (0, _normalizeDiffOptions.normalizeDiffOptions)(options)); // Given two pairs of arrays of strings:\n// Compare the pair of comparison arrays line-by-line.\n// Format the corresponding lines in the pair of displayable arrays.\n\n\nexports.diffLinesUnified = diffLinesUnified;\n\nconst diffLinesUnified2 = (aLinesDisplay, bLinesDisplay, aLinesCompare, bLinesCompare, options) => {\n  if (isEmptyString(aLinesDisplay) && isEmptyString(aLinesCompare)) {\n    aLinesDisplay = [];\n    aLinesCompare = [];\n  }\n\n  if (isEmptyString(bLinesDisplay) && isEmptyString(bLinesCompare)) {\n    bLinesDisplay = [];\n    bLinesCompare = [];\n  }\n\n  if (aLinesDisplay.length !== aLinesCompare.length || bLinesDisplay.length !== bLinesCompare.length) {\n    // Fall back to diff of display lines.\n    return diffLinesUnified(aLinesDisplay, bLinesDisplay, options);\n  }\n\n  const diffs = diffLinesRaw(aLinesCompare, bLinesCompare); // Replace comparison lines with displayable lines.\n\n  let aIndex = 0;\n  let bIndex = 0;\n  diffs.forEach(diff => {\n    switch (diff[0]) {\n      case _cleanupSemantic.DIFF_DELETE:\n        diff[1] = aLinesDisplay[aIndex];\n        aIndex += 1;\n        break;\n\n      case _cleanupSemantic.DIFF_INSERT:\n        diff[1] = bLinesDisplay[bIndex];\n        bIndex += 1;\n        break;\n\n      default:\n        diff[1] = bLinesDisplay[bIndex];\n        aIndex += 1;\n        bIndex += 1;\n    }\n  });\n  return (0, _printDiffs.printDiffLines)(diffs, (0, _normalizeDiffOptions.normalizeDiffOptions)(options));\n}; // Compare two arrays of strings line-by-line.\n\n\nexports.diffLinesUnified2 = diffLinesUnified2;\n\nconst diffLinesRaw = (aLines, bLines) => {\n  const aLength = aLines.length;\n  const bLength = bLines.length;\n\n  const isCommon = (aIndex, bIndex) => aLines[aIndex] === bLines[bIndex];\n\n  const diffs = [];\n  let aIndex = 0;\n  let bIndex = 0;\n\n  const foundSubsequence = (nCommon, aCommon, bCommon) => {\n    for (; aIndex !== aCommon; aIndex += 1) {\n      diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_DELETE, aLines[aIndex]));\n    }\n\n    for (; bIndex !== bCommon; bIndex += 1) {\n      diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_INSERT, bLines[bIndex]));\n    }\n\n    for (; nCommon !== 0; nCommon -= 1, aIndex += 1, bIndex += 1) {\n      diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_EQUAL, bLines[bIndex]));\n    }\n  };\n\n  (0, _diffSequences.default)(aLength, bLength, isCommon, foundSubsequence); // After the last common subsequence, push remaining change items.\n\n  for (; aIndex !== aLength; aIndex += 1) {\n    diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_DELETE, aLines[aIndex]));\n  }\n\n  for (; bIndex !== bLength; bIndex += 1) {\n    diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_INSERT, bLines[bIndex]));\n  }\n\n  return diffs;\n};\n\nexports.diffLinesRaw = diffLinesRaw;","map":{"version":3,"sources":["D:/IDEA workspace/ZUA/community-manage-react/node_modules/jest-diff/build/diffLines.js"],"names":["Object","defineProperty","exports","value","diffLinesRaw","diffLinesUnified2","diffLinesUnified","_diffSequences","_interopRequireDefault","require","_cleanupSemantic","_normalizeDiffOptions","_printDiffs","obj","__esModule","default","isEmptyString","lines","length","aLines","bLines","options","printDiffLines","normalizeDiffOptions","aLinesDisplay","bLinesDisplay","aLinesCompare","bLinesCompare","diffs","aIndex","bIndex","forEach","diff","DIFF_DELETE","DIFF_INSERT","aLength","bLength","isCommon","foundSubsequence","nCommon","aCommon","bCommon","push","Diff","DIFF_EQUAL"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.diffLinesRaw = exports.diffLinesUnified2 = exports.diffLinesUnified = void 0;\n\nvar _diffSequences = _interopRequireDefault(require('diff-sequences'));\n\nvar _cleanupSemantic = require('./cleanupSemantic');\n\nvar _normalizeDiffOptions = require('./normalizeDiffOptions');\n\nvar _printDiffs = require('./printDiffs');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst isEmptyString = lines => lines.length === 1 && lines[0].length === 0; // Compare two arrays of strings line-by-line. Format as comparison lines.\n\nconst diffLinesUnified = (aLines, bLines, options) =>\n  (0, _printDiffs.printDiffLines)(\n    diffLinesRaw(\n      isEmptyString(aLines) ? [] : aLines,\n      isEmptyString(bLines) ? [] : bLines\n    ),\n    (0, _normalizeDiffOptions.normalizeDiffOptions)(options)\n  ); // Given two pairs of arrays of strings:\n// Compare the pair of comparison arrays line-by-line.\n// Format the corresponding lines in the pair of displayable arrays.\n\nexports.diffLinesUnified = diffLinesUnified;\n\nconst diffLinesUnified2 = (\n  aLinesDisplay,\n  bLinesDisplay,\n  aLinesCompare,\n  bLinesCompare,\n  options\n) => {\n  if (isEmptyString(aLinesDisplay) && isEmptyString(aLinesCompare)) {\n    aLinesDisplay = [];\n    aLinesCompare = [];\n  }\n\n  if (isEmptyString(bLinesDisplay) && isEmptyString(bLinesCompare)) {\n    bLinesDisplay = [];\n    bLinesCompare = [];\n  }\n\n  if (\n    aLinesDisplay.length !== aLinesCompare.length ||\n    bLinesDisplay.length !== bLinesCompare.length\n  ) {\n    // Fall back to diff of display lines.\n    return diffLinesUnified(aLinesDisplay, bLinesDisplay, options);\n  }\n\n  const diffs = diffLinesRaw(aLinesCompare, bLinesCompare); // Replace comparison lines with displayable lines.\n\n  let aIndex = 0;\n  let bIndex = 0;\n  diffs.forEach(diff => {\n    switch (diff[0]) {\n      case _cleanupSemantic.DIFF_DELETE:\n        diff[1] = aLinesDisplay[aIndex];\n        aIndex += 1;\n        break;\n\n      case _cleanupSemantic.DIFF_INSERT:\n        diff[1] = bLinesDisplay[bIndex];\n        bIndex += 1;\n        break;\n\n      default:\n        diff[1] = bLinesDisplay[bIndex];\n        aIndex += 1;\n        bIndex += 1;\n    }\n  });\n  return (0, _printDiffs.printDiffLines)(\n    diffs,\n    (0, _normalizeDiffOptions.normalizeDiffOptions)(options)\n  );\n}; // Compare two arrays of strings line-by-line.\n\nexports.diffLinesUnified2 = diffLinesUnified2;\n\nconst diffLinesRaw = (aLines, bLines) => {\n  const aLength = aLines.length;\n  const bLength = bLines.length;\n\n  const isCommon = (aIndex, bIndex) => aLines[aIndex] === bLines[bIndex];\n\n  const diffs = [];\n  let aIndex = 0;\n  let bIndex = 0;\n\n  const foundSubsequence = (nCommon, aCommon, bCommon) => {\n    for (; aIndex !== aCommon; aIndex += 1) {\n      diffs.push(\n        new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_DELETE, aLines[aIndex])\n      );\n    }\n\n    for (; bIndex !== bCommon; bIndex += 1) {\n      diffs.push(\n        new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_INSERT, bLines[bIndex])\n      );\n    }\n\n    for (; nCommon !== 0; nCommon -= 1, aIndex += 1, bIndex += 1) {\n      diffs.push(\n        new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_EQUAL, bLines[bIndex])\n      );\n    }\n  };\n\n  (0, _diffSequences.default)(aLength, bLength, isCommon, foundSubsequence); // After the last common subsequence, push remaining change items.\n\n  for (; aIndex !== aLength; aIndex += 1) {\n    diffs.push(\n      new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_DELETE, aLines[aIndex])\n    );\n  }\n\n  for (; bIndex !== bLength; bIndex += 1) {\n    diffs.push(\n      new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_INSERT, bLines[bIndex])\n    );\n  }\n\n  return diffs;\n};\n\nexports.diffLinesRaw = diffLinesRaw;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst scan = require('./scan');\n\nconst parse = require('./parse');\n\nconst utils = require('./utils');\n\nconst constants = require('./constants');\n\nconst isObject = val => val && typeof val === 'object' && !Array.isArray(val);\n/**\n * Creates a matcher function from one or more glob patterns. The\n * returned function takes a string to match as its first argument,\n * and returns true if the string is a match. The returned matcher\n * function also takes a boolean as the second argument that, when true,\n * returns an object with additional information.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch(glob[, options]);\n *\n * const isMatch = picomatch('*.!(*a)');\n * console.log(isMatch('a.a')); //=> false\n * console.log(isMatch('a.b')); //=> true\n * ```\n * @name picomatch\n * @param {String|Array} `globs` One or more glob patterns.\n * @param {Object=} `options`\n * @return {Function=} Returns a matcher function.\n * @api public\n */\n\n\nconst picomatch = (glob, options, returnState = false) => {\n  if (Array.isArray(glob)) {\n    const fns = glob.map(input => picomatch(input, options, returnState));\n\n    const arrayMatcher = str => {\n      for (const isMatch of fns) {\n        const state = isMatch(str);\n        if (state) return state;\n      }\n\n      return false;\n    };\n\n    return arrayMatcher;\n  }\n\n  const isState = isObject(glob) && glob.tokens && glob.input;\n\n  if (glob === '' || typeof glob !== 'string' && !isState) {\n    throw new TypeError('Expected pattern to be a non-empty string');\n  }\n\n  const opts = options || {};\n  const posix = utils.isWindows(options);\n  const regex = isState ? picomatch.compileRe(glob, options) : picomatch.makeRe(glob, options, false, true);\n  const state = regex.state;\n  delete regex.state;\n\n  let isIgnored = () => false;\n\n  if (opts.ignore) {\n    const ignoreOpts = { ...options,\n      ignore: null,\n      onMatch: null,\n      onResult: null\n    };\n    isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);\n  }\n\n  const matcher = (input, returnObject = false) => {\n    const {\n      isMatch,\n      match,\n      output\n    } = picomatch.test(input, regex, options, {\n      glob,\n      posix\n    });\n    const result = {\n      glob,\n      state,\n      regex,\n      posix,\n      input,\n      output,\n      match,\n      isMatch\n    };\n\n    if (typeof opts.onResult === 'function') {\n      opts.onResult(result);\n    }\n\n    if (isMatch === false) {\n      result.isMatch = false;\n      return returnObject ? result : false;\n    }\n\n    if (isIgnored(input)) {\n      if (typeof opts.onIgnore === 'function') {\n        opts.onIgnore(result);\n      }\n\n      result.isMatch = false;\n      return returnObject ? result : false;\n    }\n\n    if (typeof opts.onMatch === 'function') {\n      opts.onMatch(result);\n    }\n\n    return returnObject ? result : true;\n  };\n\n  if (returnState) {\n    matcher.state = state;\n  }\n\n  return matcher;\n};\n/**\n * Test `input` with the given `regex`. This is used by the main\n * `picomatch()` function to test the input string.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.test(input, regex[, options]);\n *\n * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\\/([^/]*?))$/));\n * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }\n * ```\n * @param {String} `input` String to test.\n * @param {RegExp} `regex`\n * @return {Object} Returns an object with matching info.\n * @api public\n */\n\n\npicomatch.test = (input, regex, options, {\n  glob,\n  posix\n} = {}) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected input to be a string');\n  }\n\n  if (input === '') {\n    return {\n      isMatch: false,\n      output: ''\n    };\n  }\n\n  const opts = options || {};\n  const format = opts.format || (posix ? utils.toPosixSlashes : null);\n  let match = input === glob;\n  let output = match && format ? format(input) : input;\n\n  if (match === false) {\n    output = format ? format(input) : input;\n    match = output === glob;\n  }\n\n  if (match === false || opts.capture === true) {\n    if (opts.matchBase === true || opts.basename === true) {\n      match = picomatch.matchBase(input, regex, options, posix);\n    } else {\n      match = regex.exec(output);\n    }\n  }\n\n  return {\n    isMatch: Boolean(match),\n    match,\n    output\n  };\n};\n/**\n * Match the basename of a filepath.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.matchBase(input, glob[, options]);\n * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true\n * ```\n * @param {String} `input` String to test.\n * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).\n * @return {Boolean}\n * @api public\n */\n\n\npicomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {\n  const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);\n  return regex.test(path.basename(input));\n};\n/**\n * Returns true if **any** of the given glob `patterns` match the specified `string`.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.isMatch(string, patterns[, options]);\n *\n * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true\n * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false\n * ```\n * @param {String|Array} str The string to test.\n * @param {String|Array} patterns One or more glob patterns to use for matching.\n * @param {Object} [options] See available [options](#options).\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\n\npicomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);\n/**\n * Parse a glob pattern to create the source string for a regular\n * expression.\n *\n * ```js\n * const picomatch = require('picomatch');\n * const result = picomatch.parse(pattern[, options]);\n * ```\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object} Returns an object with useful properties and output to be used as a regex source string.\n * @api public\n */\n\n\npicomatch.parse = (pattern, options) => {\n  if (Array.isArray(pattern)) return pattern.map(p => picomatch.parse(p, options));\n  return parse(pattern, { ...options,\n    fastpaths: false\n  });\n};\n/**\n * Scan a glob pattern to separate the pattern into segments.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.scan(input[, options]);\n *\n * const result = picomatch.scan('!./foo/*.js');\n * console.log(result);\n * { prefix: '!./',\n *   input: '!./foo/*.js',\n *   start: 3,\n *   base: 'foo',\n *   glob: '*.js',\n *   isBrace: false,\n *   isBracket: false,\n *   isGlob: true,\n *   isExtglob: false,\n *   isGlobstar: false,\n *   negated: true }\n * ```\n * @param {String} `input` Glob pattern to scan.\n * @param {Object} `options`\n * @return {Object} Returns an object with\n * @api public\n */\n\n\npicomatch.scan = (input, options) => scan(input, options);\n/**\n * Create a regular expression from a parsed glob pattern.\n *\n * ```js\n * const picomatch = require('picomatch');\n * const state = picomatch.parse('*.js');\n * // picomatch.compileRe(state[, options]);\n *\n * console.log(picomatch.compileRe(state));\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n * ```\n * @param {String} `state` The object returned from the `.parse` method.\n * @param {Object} `options`\n * @return {RegExp} Returns a regex created from the given pattern.\n * @api public\n */\n\n\npicomatch.compileRe = (parsed, options, returnOutput = false, returnState = false) => {\n  if (returnOutput === true) {\n    return parsed.output;\n  }\n\n  const opts = options || {};\n  const prepend = opts.contains ? '' : '^';\n  const append = opts.contains ? '' : '$';\n  let source = `${prepend}(?:${parsed.output})${append}`;\n\n  if (parsed && parsed.negated === true) {\n    source = `^(?!${source}).*$`;\n  }\n\n  const regex = picomatch.toRegex(source, options);\n\n  if (returnState === true) {\n    regex.state = parsed;\n  }\n\n  return regex;\n};\n\npicomatch.makeRe = (input, options, returnOutput = false, returnState = false) => {\n  if (!input || typeof input !== 'string') {\n    throw new TypeError('Expected a non-empty string');\n  }\n\n  const opts = options || {};\n  let parsed = {\n    negated: false,\n    fastpaths: true\n  };\n  let prefix = '';\n  let output;\n\n  if (input.startsWith('./')) {\n    input = input.slice(2);\n    prefix = parsed.prefix = './';\n  }\n\n  if (opts.fastpaths !== false && (input[0] === '.' || input[0] === '*')) {\n    output = parse.fastpaths(input, options);\n  }\n\n  if (output === undefined) {\n    parsed = parse(input, options);\n    parsed.prefix = prefix + (parsed.prefix || '');\n  } else {\n    parsed.output = output;\n  }\n\n  return picomatch.compileRe(parsed, options, returnOutput, returnState);\n};\n/**\n * Create a regular expression from the given regex source string.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.toRegex(source[, options]);\n *\n * const { output } = picomatch.parse('*.js');\n * console.log(picomatch.toRegex(output));\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n * ```\n * @param {String} `source` Regular expression source string.\n * @param {Object} `options`\n * @return {RegExp}\n * @api public\n */\n\n\npicomatch.toRegex = (source, options) => {\n  try {\n    const opts = options || {};\n    return new RegExp(source, opts.flags || (opts.nocase ? 'i' : ''));\n  } catch (err) {\n    if (options && options.debug === true) throw err;\n    return /$^/;\n  }\n};\n/**\n * Picomatch constants.\n * @return {Object}\n */\n\n\npicomatch.constants = constants;\n/**\n * Expose \"picomatch\"\n */\n\nmodule.exports = picomatch;","map":{"version":3,"sources":["D:/IDEA workspace/ZUA/community-manage-react/node_modules/picomatch/lib/picomatch.js"],"names":["path","require","scan","parse","utils","constants","isObject","val","Array","isArray","picomatch","glob","options","returnState","fns","map","input","arrayMatcher","str","isMatch","state","isState","tokens","TypeError","opts","posix","isWindows","regex","compileRe","makeRe","isIgnored","ignore","ignoreOpts","onMatch","onResult","matcher","returnObject","match","output","test","result","onIgnore","format","toPosixSlashes","capture","matchBase","basename","exec","Boolean","RegExp","patterns","pattern","p","fastpaths","parsed","returnOutput","prepend","contains","append","source","negated","toRegex","prefix","startsWith","slice","undefined","flags","nocase","err","debug","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMK,QAAQ,GAAGC,GAAG,IAAIA,GAAG,IAAI,OAAOA,GAAP,KAAe,QAAtB,IAAkC,CAACC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAA3D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,SAAS,GAAG,CAACC,IAAD,EAAOC,OAAP,EAAgBC,WAAW,GAAG,KAA9B,KAAwC;AACxD,MAAIL,KAAK,CAACC,OAAN,CAAcE,IAAd,CAAJ,EAAyB;AACvB,UAAMG,GAAG,GAAGH,IAAI,CAACI,GAAL,CAASC,KAAK,IAAIN,SAAS,CAACM,KAAD,EAAQJ,OAAR,EAAiBC,WAAjB,CAA3B,CAAZ;;AACA,UAAMI,YAAY,GAAGC,GAAG,IAAI;AAC1B,WAAK,MAAMC,OAAX,IAAsBL,GAAtB,EAA2B;AACzB,cAAMM,KAAK,GAAGD,OAAO,CAACD,GAAD,CAArB;AACA,YAAIE,KAAJ,EAAW,OAAOA,KAAP;AACZ;;AACD,aAAO,KAAP;AACD,KAND;;AAOA,WAAOH,YAAP;AACD;;AAED,QAAMI,OAAO,GAAGf,QAAQ,CAACK,IAAD,CAAR,IAAkBA,IAAI,CAACW,MAAvB,IAAiCX,IAAI,CAACK,KAAtD;;AAEA,MAAIL,IAAI,KAAK,EAAT,IAAgB,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,CAACU,OAAjD,EAA2D;AACzD,UAAM,IAAIE,SAAJ,CAAc,2CAAd,CAAN;AACD;;AAED,QAAMC,IAAI,GAAGZ,OAAO,IAAI,EAAxB;AACA,QAAMa,KAAK,GAAGrB,KAAK,CAACsB,SAAN,CAAgBd,OAAhB,CAAd;AACA,QAAMe,KAAK,GAAGN,OAAO,GACjBX,SAAS,CAACkB,SAAV,CAAoBjB,IAApB,EAA0BC,OAA1B,CADiB,GAEjBF,SAAS,CAACmB,MAAV,CAAiBlB,IAAjB,EAAuBC,OAAvB,EAAgC,KAAhC,EAAuC,IAAvC,CAFJ;AAIA,QAAMQ,KAAK,GAAGO,KAAK,CAACP,KAApB;AACA,SAAOO,KAAK,CAACP,KAAb;;AAEA,MAAIU,SAAS,GAAG,MAAM,KAAtB;;AACA,MAAIN,IAAI,CAACO,MAAT,EAAiB;AACf,UAAMC,UAAU,GAAG,EAAE,GAAGpB,OAAL;AAAcmB,MAAAA,MAAM,EAAE,IAAtB;AAA4BE,MAAAA,OAAO,EAAE,IAArC;AAA2CC,MAAAA,QAAQ,EAAE;AAArD,KAAnB;AACAJ,IAAAA,SAAS,GAAGpB,SAAS,CAACc,IAAI,CAACO,MAAN,EAAcC,UAAd,EAA0BnB,WAA1B,CAArB;AACD;;AAED,QAAMsB,OAAO,GAAG,CAACnB,KAAD,EAAQoB,YAAY,GAAG,KAAvB,KAAiC;AAC/C,UAAM;AAAEjB,MAAAA,OAAF;AAAWkB,MAAAA,KAAX;AAAkBC,MAAAA;AAAlB,QAA6B5B,SAAS,CAAC6B,IAAV,CAAevB,KAAf,EAAsBW,KAAtB,EAA6Bf,OAA7B,EAAsC;AAAED,MAAAA,IAAF;AAAQc,MAAAA;AAAR,KAAtC,CAAnC;AACA,UAAMe,MAAM,GAAG;AAAE7B,MAAAA,IAAF;AAAQS,MAAAA,KAAR;AAAeO,MAAAA,KAAf;AAAsBF,MAAAA,KAAtB;AAA6BT,MAAAA,KAA7B;AAAoCsB,MAAAA,MAApC;AAA4CD,MAAAA,KAA5C;AAAmDlB,MAAAA;AAAnD,KAAf;;AAEA,QAAI,OAAOK,IAAI,CAACU,QAAZ,KAAyB,UAA7B,EAAyC;AACvCV,MAAAA,IAAI,CAACU,QAAL,CAAcM,MAAd;AACD;;AAED,QAAIrB,OAAO,KAAK,KAAhB,EAAuB;AACrBqB,MAAAA,MAAM,CAACrB,OAAP,GAAiB,KAAjB;AACA,aAAOiB,YAAY,GAAGI,MAAH,GAAY,KAA/B;AACD;;AAED,QAAIV,SAAS,CAACd,KAAD,CAAb,EAAsB;AACpB,UAAI,OAAOQ,IAAI,CAACiB,QAAZ,KAAyB,UAA7B,EAAyC;AACvCjB,QAAAA,IAAI,CAACiB,QAAL,CAAcD,MAAd;AACD;;AACDA,MAAAA,MAAM,CAACrB,OAAP,GAAiB,KAAjB;AACA,aAAOiB,YAAY,GAAGI,MAAH,GAAY,KAA/B;AACD;;AAED,QAAI,OAAOhB,IAAI,CAACS,OAAZ,KAAwB,UAA5B,EAAwC;AACtCT,MAAAA,IAAI,CAACS,OAAL,CAAaO,MAAb;AACD;;AACD,WAAOJ,YAAY,GAAGI,MAAH,GAAY,IAA/B;AACD,GAzBD;;AA2BA,MAAI3B,WAAJ,EAAiB;AACfsB,IAAAA,OAAO,CAACf,KAAR,GAAgBA,KAAhB;AACD;;AAED,SAAOe,OAAP;AACD,CAlED;AAoEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAzB,SAAS,CAAC6B,IAAV,GAAiB,CAACvB,KAAD,EAAQW,KAAR,EAAef,OAAf,EAAwB;AAAED,EAAAA,IAAF;AAAQc,EAAAA;AAAR,IAAkB,EAA1C,KAAiD;AAChE,MAAI,OAAOT,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAM,IAAIO,SAAJ,CAAc,+BAAd,CAAN;AACD;;AAED,MAAIP,KAAK,KAAK,EAAd,EAAkB;AAChB,WAAO;AAAEG,MAAAA,OAAO,EAAE,KAAX;AAAkBmB,MAAAA,MAAM,EAAE;AAA1B,KAAP;AACD;;AAED,QAAMd,IAAI,GAAGZ,OAAO,IAAI,EAAxB;AACA,QAAM8B,MAAM,GAAGlB,IAAI,CAACkB,MAAL,KAAgBjB,KAAK,GAAGrB,KAAK,CAACuC,cAAT,GAA0B,IAA/C,CAAf;AACA,MAAIN,KAAK,GAAGrB,KAAK,KAAKL,IAAtB;AACA,MAAI2B,MAAM,GAAID,KAAK,IAAIK,MAAV,GAAoBA,MAAM,CAAC1B,KAAD,CAA1B,GAAoCA,KAAjD;;AAEA,MAAIqB,KAAK,KAAK,KAAd,EAAqB;AACnBC,IAAAA,MAAM,GAAGI,MAAM,GAAGA,MAAM,CAAC1B,KAAD,CAAT,GAAmBA,KAAlC;AACAqB,IAAAA,KAAK,GAAGC,MAAM,KAAK3B,IAAnB;AACD;;AAED,MAAI0B,KAAK,KAAK,KAAV,IAAmBb,IAAI,CAACoB,OAAL,KAAiB,IAAxC,EAA8C;AAC5C,QAAIpB,IAAI,CAACqB,SAAL,KAAmB,IAAnB,IAA2BrB,IAAI,CAACsB,QAAL,KAAkB,IAAjD,EAAuD;AACrDT,MAAAA,KAAK,GAAG3B,SAAS,CAACmC,SAAV,CAAoB7B,KAApB,EAA2BW,KAA3B,EAAkCf,OAAlC,EAA2Ca,KAA3C,CAAR;AACD,KAFD,MAEO;AACLY,MAAAA,KAAK,GAAGV,KAAK,CAACoB,IAAN,CAAWT,MAAX,CAAR;AACD;AACF;;AAED,SAAO;AAAEnB,IAAAA,OAAO,EAAE6B,OAAO,CAACX,KAAD,CAAlB;AAA2BA,IAAAA,KAA3B;AAAkCC,IAAAA;AAAlC,GAAP;AACD,CA5BD;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA5B,SAAS,CAACmC,SAAV,GAAsB,CAAC7B,KAAD,EAAQL,IAAR,EAAcC,OAAd,EAAuBa,KAAK,GAAGrB,KAAK,CAACsB,SAAN,CAAgBd,OAAhB,CAA/B,KAA4D;AAChF,QAAMe,KAAK,GAAGhB,IAAI,YAAYsC,MAAhB,GAAyBtC,IAAzB,GAAgCD,SAAS,CAACmB,MAAV,CAAiBlB,IAAjB,EAAuBC,OAAvB,CAA9C;AACA,SAAOe,KAAK,CAACY,IAAN,CAAWvC,IAAI,CAAC8C,QAAL,CAAc9B,KAAd,CAAX,CAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAN,SAAS,CAACS,OAAV,GAAoB,CAACD,GAAD,EAAMgC,QAAN,EAAgBtC,OAAhB,KAA4BF,SAAS,CAACwC,QAAD,EAAWtC,OAAX,CAAT,CAA6BM,GAA7B,CAAhD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAR,SAAS,CAACP,KAAV,GAAkB,CAACgD,OAAD,EAAUvC,OAAV,KAAsB;AACtC,MAAIJ,KAAK,CAACC,OAAN,CAAc0C,OAAd,CAAJ,EAA4B,OAAOA,OAAO,CAACpC,GAAR,CAAYqC,CAAC,IAAI1C,SAAS,CAACP,KAAV,CAAgBiD,CAAhB,EAAmBxC,OAAnB,CAAjB,CAAP;AAC5B,SAAOT,KAAK,CAACgD,OAAD,EAAU,EAAE,GAAGvC,OAAL;AAAcyC,IAAAA,SAAS,EAAE;AAAzB,GAAV,CAAZ;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA3C,SAAS,CAACR,IAAV,GAAiB,CAACc,KAAD,EAAQJ,OAAR,KAAoBV,IAAI,CAACc,KAAD,EAAQJ,OAAR,CAAzC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAF,SAAS,CAACkB,SAAV,GAAsB,CAAC0B,MAAD,EAAS1C,OAAT,EAAkB2C,YAAY,GAAG,KAAjC,EAAwC1C,WAAW,GAAG,KAAtD,KAAgE;AACpF,MAAI0C,YAAY,KAAK,IAArB,EAA2B;AACzB,WAAOD,MAAM,CAAChB,MAAd;AACD;;AAED,QAAMd,IAAI,GAAGZ,OAAO,IAAI,EAAxB;AACA,QAAM4C,OAAO,GAAGhC,IAAI,CAACiC,QAAL,GAAgB,EAAhB,GAAqB,GAArC;AACA,QAAMC,MAAM,GAAGlC,IAAI,CAACiC,QAAL,GAAgB,EAAhB,GAAqB,GAApC;AAEA,MAAIE,MAAM,GAAI,GAAEH,OAAQ,MAAKF,MAAM,CAAChB,MAAO,IAAGoB,MAAO,EAArD;;AACA,MAAIJ,MAAM,IAAIA,MAAM,CAACM,OAAP,KAAmB,IAAjC,EAAuC;AACrCD,IAAAA,MAAM,GAAI,OAAMA,MAAO,MAAvB;AACD;;AAED,QAAMhC,KAAK,GAAGjB,SAAS,CAACmD,OAAV,CAAkBF,MAAlB,EAA0B/C,OAA1B,CAAd;;AACA,MAAIC,WAAW,KAAK,IAApB,EAA0B;AACxBc,IAAAA,KAAK,CAACP,KAAN,GAAckC,MAAd;AACD;;AAED,SAAO3B,KAAP;AACD,CApBD;;AAsBAjB,SAAS,CAACmB,MAAV,GAAmB,CAACb,KAAD,EAAQJ,OAAR,EAAiB2C,YAAY,GAAG,KAAhC,EAAuC1C,WAAW,GAAG,KAArD,KAA+D;AAChF,MAAI,CAACG,KAAD,IAAU,OAAOA,KAAP,KAAiB,QAA/B,EAAyC;AACvC,UAAM,IAAIO,SAAJ,CAAc,6BAAd,CAAN;AACD;;AAED,QAAMC,IAAI,GAAGZ,OAAO,IAAI,EAAxB;AACA,MAAI0C,MAAM,GAAG;AAAEM,IAAAA,OAAO,EAAE,KAAX;AAAkBP,IAAAA,SAAS,EAAE;AAA7B,GAAb;AACA,MAAIS,MAAM,GAAG,EAAb;AACA,MAAIxB,MAAJ;;AAEA,MAAItB,KAAK,CAAC+C,UAAN,CAAiB,IAAjB,CAAJ,EAA4B;AAC1B/C,IAAAA,KAAK,GAAGA,KAAK,CAACgD,KAAN,CAAY,CAAZ,CAAR;AACAF,IAAAA,MAAM,GAAGR,MAAM,CAACQ,MAAP,GAAgB,IAAzB;AACD;;AAED,MAAItC,IAAI,CAAC6B,SAAL,KAAmB,KAAnB,KAA6BrC,KAAK,CAAC,CAAD,CAAL,KAAa,GAAb,IAAoBA,KAAK,CAAC,CAAD,CAAL,KAAa,GAA9D,CAAJ,EAAwE;AACtEsB,IAAAA,MAAM,GAAGnC,KAAK,CAACkD,SAAN,CAAgBrC,KAAhB,EAAuBJ,OAAvB,CAAT;AACD;;AAED,MAAI0B,MAAM,KAAK2B,SAAf,EAA0B;AACxBX,IAAAA,MAAM,GAAGnD,KAAK,CAACa,KAAD,EAAQJ,OAAR,CAAd;AACA0C,IAAAA,MAAM,CAACQ,MAAP,GAAgBA,MAAM,IAAIR,MAAM,CAACQ,MAAP,IAAiB,EAArB,CAAtB;AACD,GAHD,MAGO;AACLR,IAAAA,MAAM,CAAChB,MAAP,GAAgBA,MAAhB;AACD;;AAED,SAAO5B,SAAS,CAACkB,SAAV,CAAoB0B,MAApB,EAA4B1C,OAA5B,EAAqC2C,YAArC,EAAmD1C,WAAnD,CAAP;AACD,CA3BD;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAH,SAAS,CAACmD,OAAV,GAAoB,CAACF,MAAD,EAAS/C,OAAT,KAAqB;AACvC,MAAI;AACF,UAAMY,IAAI,GAAGZ,OAAO,IAAI,EAAxB;AACA,WAAO,IAAIqC,MAAJ,CAAWU,MAAX,EAAmBnC,IAAI,CAAC0C,KAAL,KAAe1C,IAAI,CAAC2C,MAAL,GAAc,GAAd,GAAoB,EAAnC,CAAnB,CAAP;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZ,QAAIxD,OAAO,IAAIA,OAAO,CAACyD,KAAR,KAAkB,IAAjC,EAAuC,MAAMD,GAAN;AACvC,WAAO,IAAP;AACD;AACF,CARD;AAUA;AACA;AACA;AACA;;;AAEA1D,SAAS,CAACL,SAAV,GAAsBA,SAAtB;AAEA;AACA;AACA;;AAEAiE,MAAM,CAACC,OAAP,GAAiB7D,SAAjB","sourcesContent":["'use strict';\n\nconst path = require('path');\nconst scan = require('./scan');\nconst parse = require('./parse');\nconst utils = require('./utils');\nconst constants = require('./constants');\nconst isObject = val => val && typeof val === 'object' && !Array.isArray(val);\n\n/**\n * Creates a matcher function from one or more glob patterns. The\n * returned function takes a string to match as its first argument,\n * and returns true if the string is a match. The returned matcher\n * function also takes a boolean as the second argument that, when true,\n * returns an object with additional information.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch(glob[, options]);\n *\n * const isMatch = picomatch('*.!(*a)');\n * console.log(isMatch('a.a')); //=> false\n * console.log(isMatch('a.b')); //=> true\n * ```\n * @name picomatch\n * @param {String|Array} `globs` One or more glob patterns.\n * @param {Object=} `options`\n * @return {Function=} Returns a matcher function.\n * @api public\n */\n\nconst picomatch = (glob, options, returnState = false) => {\n  if (Array.isArray(glob)) {\n    const fns = glob.map(input => picomatch(input, options, returnState));\n    const arrayMatcher = str => {\n      for (const isMatch of fns) {\n        const state = isMatch(str);\n        if (state) return state;\n      }\n      return false;\n    };\n    return arrayMatcher;\n  }\n\n  const isState = isObject(glob) && glob.tokens && glob.input;\n\n  if (glob === '' || (typeof glob !== 'string' && !isState)) {\n    throw new TypeError('Expected pattern to be a non-empty string');\n  }\n\n  const opts = options || {};\n  const posix = utils.isWindows(options);\n  const regex = isState\n    ? picomatch.compileRe(glob, options)\n    : picomatch.makeRe(glob, options, false, true);\n\n  const state = regex.state;\n  delete regex.state;\n\n  let isIgnored = () => false;\n  if (opts.ignore) {\n    const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };\n    isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);\n  }\n\n  const matcher = (input, returnObject = false) => {\n    const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });\n    const result = { glob, state, regex, posix, input, output, match, isMatch };\n\n    if (typeof opts.onResult === 'function') {\n      opts.onResult(result);\n    }\n\n    if (isMatch === false) {\n      result.isMatch = false;\n      return returnObject ? result : false;\n    }\n\n    if (isIgnored(input)) {\n      if (typeof opts.onIgnore === 'function') {\n        opts.onIgnore(result);\n      }\n      result.isMatch = false;\n      return returnObject ? result : false;\n    }\n\n    if (typeof opts.onMatch === 'function') {\n      opts.onMatch(result);\n    }\n    return returnObject ? result : true;\n  };\n\n  if (returnState) {\n    matcher.state = state;\n  }\n\n  return matcher;\n};\n\n/**\n * Test `input` with the given `regex`. This is used by the main\n * `picomatch()` function to test the input string.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.test(input, regex[, options]);\n *\n * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\\/([^/]*?))$/));\n * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }\n * ```\n * @param {String} `input` String to test.\n * @param {RegExp} `regex`\n * @return {Object} Returns an object with matching info.\n * @api public\n */\n\npicomatch.test = (input, regex, options, { glob, posix } = {}) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected input to be a string');\n  }\n\n  if (input === '') {\n    return { isMatch: false, output: '' };\n  }\n\n  const opts = options || {};\n  const format = opts.format || (posix ? utils.toPosixSlashes : null);\n  let match = input === glob;\n  let output = (match && format) ? format(input) : input;\n\n  if (match === false) {\n    output = format ? format(input) : input;\n    match = output === glob;\n  }\n\n  if (match === false || opts.capture === true) {\n    if (opts.matchBase === true || opts.basename === true) {\n      match = picomatch.matchBase(input, regex, options, posix);\n    } else {\n      match = regex.exec(output);\n    }\n  }\n\n  return { isMatch: Boolean(match), match, output };\n};\n\n/**\n * Match the basename of a filepath.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.matchBase(input, glob[, options]);\n * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true\n * ```\n * @param {String} `input` String to test.\n * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).\n * @return {Boolean}\n * @api public\n */\n\npicomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {\n  const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);\n  return regex.test(path.basename(input));\n};\n\n/**\n * Returns true if **any** of the given glob `patterns` match the specified `string`.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.isMatch(string, patterns[, options]);\n *\n * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true\n * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false\n * ```\n * @param {String|Array} str The string to test.\n * @param {String|Array} patterns One or more glob patterns to use for matching.\n * @param {Object} [options] See available [options](#options).\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\npicomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);\n\n/**\n * Parse a glob pattern to create the source string for a regular\n * expression.\n *\n * ```js\n * const picomatch = require('picomatch');\n * const result = picomatch.parse(pattern[, options]);\n * ```\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object} Returns an object with useful properties and output to be used as a regex source string.\n * @api public\n */\n\npicomatch.parse = (pattern, options) => {\n  if (Array.isArray(pattern)) return pattern.map(p => picomatch.parse(p, options));\n  return parse(pattern, { ...options, fastpaths: false });\n};\n\n/**\n * Scan a glob pattern to separate the pattern into segments.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.scan(input[, options]);\n *\n * const result = picomatch.scan('!./foo/*.js');\n * console.log(result);\n * { prefix: '!./',\n *   input: '!./foo/*.js',\n *   start: 3,\n *   base: 'foo',\n *   glob: '*.js',\n *   isBrace: false,\n *   isBracket: false,\n *   isGlob: true,\n *   isExtglob: false,\n *   isGlobstar: false,\n *   negated: true }\n * ```\n * @param {String} `input` Glob pattern to scan.\n * @param {Object} `options`\n * @return {Object} Returns an object with\n * @api public\n */\n\npicomatch.scan = (input, options) => scan(input, options);\n\n/**\n * Create a regular expression from a parsed glob pattern.\n *\n * ```js\n * const picomatch = require('picomatch');\n * const state = picomatch.parse('*.js');\n * // picomatch.compileRe(state[, options]);\n *\n * console.log(picomatch.compileRe(state));\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n * ```\n * @param {String} `state` The object returned from the `.parse` method.\n * @param {Object} `options`\n * @return {RegExp} Returns a regex created from the given pattern.\n * @api public\n */\n\npicomatch.compileRe = (parsed, options, returnOutput = false, returnState = false) => {\n  if (returnOutput === true) {\n    return parsed.output;\n  }\n\n  const opts = options || {};\n  const prepend = opts.contains ? '' : '^';\n  const append = opts.contains ? '' : '$';\n\n  let source = `${prepend}(?:${parsed.output})${append}`;\n  if (parsed && parsed.negated === true) {\n    source = `^(?!${source}).*$`;\n  }\n\n  const regex = picomatch.toRegex(source, options);\n  if (returnState === true) {\n    regex.state = parsed;\n  }\n\n  return regex;\n};\n\npicomatch.makeRe = (input, options, returnOutput = false, returnState = false) => {\n  if (!input || typeof input !== 'string') {\n    throw new TypeError('Expected a non-empty string');\n  }\n\n  const opts = options || {};\n  let parsed = { negated: false, fastpaths: true };\n  let prefix = '';\n  let output;\n\n  if (input.startsWith('./')) {\n    input = input.slice(2);\n    prefix = parsed.prefix = './';\n  }\n\n  if (opts.fastpaths !== false && (input[0] === '.' || input[0] === '*')) {\n    output = parse.fastpaths(input, options);\n  }\n\n  if (output === undefined) {\n    parsed = parse(input, options);\n    parsed.prefix = prefix + (parsed.prefix || '');\n  } else {\n    parsed.output = output;\n  }\n\n  return picomatch.compileRe(parsed, options, returnOutput, returnState);\n};\n\n/**\n * Create a regular expression from the given regex source string.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.toRegex(source[, options]);\n *\n * const { output } = picomatch.parse('*.js');\n * console.log(picomatch.toRegex(output));\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n * ```\n * @param {String} `source` Regular expression source string.\n * @param {Object} `options`\n * @return {RegExp}\n * @api public\n */\n\npicomatch.toRegex = (source, options) => {\n  try {\n    const opts = options || {};\n    return new RegExp(source, opts.flags || (opts.nocase ? 'i' : ''));\n  } catch (err) {\n    if (options && options.debug === true) throw err;\n    return /$^/;\n  }\n};\n\n/**\n * Picomatch constants.\n * @return {Object}\n */\n\npicomatch.constants = constants;\n\n/**\n * Expose \"picomatch\"\n */\n\nmodule.exports = picomatch;\n"]},"metadata":{},"sourceType":"script"}
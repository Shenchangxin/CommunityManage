{"ast":null,"code":"'use strict';\n\nconst utils = require('./utils');\n\nconst {\n  CHAR_ASTERISK,\n\n  /* * */\n  CHAR_AT,\n\n  /* @ */\n  CHAR_BACKWARD_SLASH,\n\n  /* \\ */\n  CHAR_COMMA,\n\n  /* , */\n  CHAR_DOT,\n\n  /* . */\n  CHAR_EXCLAMATION_MARK,\n\n  /* ! */\n  CHAR_FORWARD_SLASH,\n\n  /* / */\n  CHAR_LEFT_CURLY_BRACE,\n\n  /* { */\n  CHAR_LEFT_PARENTHESES,\n\n  /* ( */\n  CHAR_LEFT_SQUARE_BRACKET,\n\n  /* [ */\n  CHAR_PLUS,\n\n  /* + */\n  CHAR_QUESTION_MARK,\n\n  /* ? */\n  CHAR_RIGHT_CURLY_BRACE,\n\n  /* } */\n  CHAR_RIGHT_PARENTHESES,\n\n  /* ) */\n  CHAR_RIGHT_SQUARE_BRACKET\n  /* ] */\n\n} = require('./constants');\n\nconst isPathSeparator = code => {\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n};\n\nconst depth = token => {\n  if (token.isPrefix !== true) {\n    token.depth = token.isGlobstar ? Infinity : 1;\n  }\n};\n/**\n * Quickly scans a glob pattern and returns an object with a handful of\n * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),\n * `glob` (the actual pattern), and `negated` (true if the path starts with `!`).\n *\n * ```js\n * const pm = require('picomatch');\n * console.log(pm.scan('foo/bar/*.js'));\n * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {Object} Returns an object with tokens and regex source string.\n * @api public\n */\n\n\nconst scan = (input, options) => {\n  const opts = options || {};\n  const length = input.length - 1;\n  const scanToEnd = opts.parts === true || opts.scanToEnd === true;\n  const slashes = [];\n  const tokens = [];\n  const parts = [];\n  let str = input;\n  let index = -1;\n  let start = 0;\n  let lastIndex = 0;\n  let isBrace = false;\n  let isBracket = false;\n  let isGlob = false;\n  let isExtglob = false;\n  let isGlobstar = false;\n  let braceEscaped = false;\n  let backslashes = false;\n  let negated = false;\n  let finished = false;\n  let braces = 0;\n  let prev;\n  let code;\n  let token = {\n    value: '',\n    depth: 0,\n    isGlob: false\n  };\n\n  const eos = () => index >= length;\n\n  const peek = () => str.charCodeAt(index + 1);\n\n  const advance = () => {\n    prev = code;\n    return str.charCodeAt(++index);\n  };\n\n  while (index < length) {\n    code = advance();\n    let next;\n\n    if (code === CHAR_BACKWARD_SLASH) {\n      backslashes = token.backslashes = true;\n      code = advance();\n\n      if (code === CHAR_LEFT_CURLY_BRACE) {\n        braceEscaped = true;\n      }\n\n      continue;\n    }\n\n    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {\n      braces++;\n\n      while (eos() !== true && (code = advance())) {\n        if (code === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (code === CHAR_LEFT_CURLY_BRACE) {\n          braces++;\n          continue;\n        }\n\n        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (braceEscaped !== true && code === CHAR_COMMA) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (code === CHAR_RIGHT_CURLY_BRACE) {\n          braces--;\n\n          if (braces === 0) {\n            braceEscaped = false;\n            isBrace = token.isBrace = true;\n            finished = true;\n            break;\n          }\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (code === CHAR_FORWARD_SLASH) {\n      slashes.push(index);\n      tokens.push(token);\n      token = {\n        value: '',\n        depth: 0,\n        isGlob: false\n      };\n      if (finished === true) continue;\n\n      if (prev === CHAR_DOT && index === start + 1) {\n        start += 2;\n        continue;\n      }\n\n      lastIndex = index + 1;\n      continue;\n    }\n\n    if (opts.noext !== true) {\n      const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;\n\n      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {\n        isGlob = token.isGlob = true;\n        isExtglob = token.isExtglob = true;\n        finished = true;\n\n        if (scanToEnd === true) {\n          while (eos() !== true && (code = advance())) {\n            if (code === CHAR_BACKWARD_SLASH) {\n              backslashes = token.backslashes = true;\n              code = advance();\n              continue;\n            }\n\n            if (code === CHAR_RIGHT_PARENTHESES) {\n              isGlob = token.isGlob = true;\n              finished = true;\n              break;\n            }\n          }\n\n          continue;\n        }\n\n        break;\n      }\n    }\n\n    if (code === CHAR_ASTERISK) {\n      if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (code === CHAR_QUESTION_MARK) {\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (code === CHAR_LEFT_SQUARE_BRACKET) {\n      while (eos() !== true && (next = advance())) {\n        if (next === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\n          isBracket = token.isBracket = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n          break;\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {\n      negated = token.negated = true;\n      start++;\n      continue;\n    }\n\n    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {\n      isGlob = token.isGlob = true;\n\n      if (scanToEnd === true) {\n        while (eos() !== true && (code = advance())) {\n          if (code === CHAR_LEFT_PARENTHESES) {\n            backslashes = token.backslashes = true;\n            code = advance();\n            continue;\n          }\n\n          if (code === CHAR_RIGHT_PARENTHESES) {\n            finished = true;\n            break;\n          }\n        }\n\n        continue;\n      }\n\n      break;\n    }\n\n    if (isGlob === true) {\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n  }\n\n  if (opts.noext === true) {\n    isExtglob = false;\n    isGlob = false;\n  }\n\n  let base = str;\n  let prefix = '';\n  let glob = '';\n\n  if (start > 0) {\n    prefix = str.slice(0, start);\n    str = str.slice(start);\n    lastIndex -= start;\n  }\n\n  if (base && isGlob === true && lastIndex > 0) {\n    base = str.slice(0, lastIndex);\n    glob = str.slice(lastIndex);\n  } else if (isGlob === true) {\n    base = '';\n    glob = str;\n  } else {\n    base = str;\n  }\n\n  if (base && base !== '' && base !== '/' && base !== str) {\n    if (isPathSeparator(base.charCodeAt(base.length - 1))) {\n      base = base.slice(0, -1);\n    }\n  }\n\n  if (opts.unescape === true) {\n    if (glob) glob = utils.removeBackslashes(glob);\n\n    if (base && backslashes === true) {\n      base = utils.removeBackslashes(base);\n    }\n  }\n\n  const state = {\n    prefix,\n    input,\n    start,\n    base,\n    glob,\n    isBrace,\n    isBracket,\n    isGlob,\n    isExtglob,\n    isGlobstar,\n    negated\n  };\n\n  if (opts.tokens === true) {\n    state.maxDepth = 0;\n\n    if (!isPathSeparator(code)) {\n      tokens.push(token);\n    }\n\n    state.tokens = tokens;\n  }\n\n  if (opts.parts === true || opts.tokens === true) {\n    let prevIndex;\n\n    for (let idx = 0; idx < slashes.length; idx++) {\n      const n = prevIndex ? prevIndex + 1 : start;\n      const i = slashes[idx];\n      const value = input.slice(n, i);\n\n      if (opts.tokens) {\n        if (idx === 0 && start !== 0) {\n          tokens[idx].isPrefix = true;\n          tokens[idx].value = prefix;\n        } else {\n          tokens[idx].value = value;\n        }\n\n        depth(tokens[idx]);\n        state.maxDepth += tokens[idx].depth;\n      }\n\n      if (idx !== 0 || value !== '') {\n        parts.push(value);\n      }\n\n      prevIndex = i;\n    }\n\n    if (prevIndex && prevIndex + 1 < input.length) {\n      const value = input.slice(prevIndex + 1);\n      parts.push(value);\n\n      if (opts.tokens) {\n        tokens[tokens.length - 1].value = value;\n        depth(tokens[tokens.length - 1]);\n        state.maxDepth += tokens[tokens.length - 1].depth;\n      }\n    }\n\n    state.slashes = slashes;\n    state.parts = parts;\n  }\n\n  return state;\n};\n\nmodule.exports = scan;","map":{"version":3,"sources":["D:/IDEA workspace/ZUA/community-manage-react/node_modules/picomatch/lib/scan.js"],"names":["utils","require","CHAR_ASTERISK","CHAR_AT","CHAR_BACKWARD_SLASH","CHAR_COMMA","CHAR_DOT","CHAR_EXCLAMATION_MARK","CHAR_FORWARD_SLASH","CHAR_LEFT_CURLY_BRACE","CHAR_LEFT_PARENTHESES","CHAR_LEFT_SQUARE_BRACKET","CHAR_PLUS","CHAR_QUESTION_MARK","CHAR_RIGHT_CURLY_BRACE","CHAR_RIGHT_PARENTHESES","CHAR_RIGHT_SQUARE_BRACKET","isPathSeparator","code","depth","token","isPrefix","isGlobstar","Infinity","scan","input","options","opts","length","scanToEnd","parts","slashes","tokens","str","index","start","lastIndex","isBrace","isBracket","isGlob","isExtglob","braceEscaped","backslashes","negated","finished","braces","prev","value","eos","peek","charCodeAt","advance","next","push","noext","isExtglobChar","nonegate","noparen","base","prefix","glob","slice","unescape","removeBackslashes","state","maxDepth","prevIndex","idx","n","i","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst utils = require('./utils');\nconst {\n  CHAR_ASTERISK,             /* * */\n  CHAR_AT,                   /* @ */\n  CHAR_BACKWARD_SLASH,       /* \\ */\n  CHAR_COMMA,                /* , */\n  CHAR_DOT,                  /* . */\n  CHAR_EXCLAMATION_MARK,     /* ! */\n  CHAR_FORWARD_SLASH,        /* / */\n  CHAR_LEFT_CURLY_BRACE,     /* { */\n  CHAR_LEFT_PARENTHESES,     /* ( */\n  CHAR_LEFT_SQUARE_BRACKET,  /* [ */\n  CHAR_PLUS,                 /* + */\n  CHAR_QUESTION_MARK,        /* ? */\n  CHAR_RIGHT_CURLY_BRACE,    /* } */\n  CHAR_RIGHT_PARENTHESES,    /* ) */\n  CHAR_RIGHT_SQUARE_BRACKET  /* ] */\n} = require('./constants');\n\nconst isPathSeparator = code => {\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n};\n\nconst depth = token => {\n  if (token.isPrefix !== true) {\n    token.depth = token.isGlobstar ? Infinity : 1;\n  }\n};\n\n/**\n * Quickly scans a glob pattern and returns an object with a handful of\n * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),\n * `glob` (the actual pattern), and `negated` (true if the path starts with `!`).\n *\n * ```js\n * const pm = require('picomatch');\n * console.log(pm.scan('foo/bar/*.js'));\n * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {Object} Returns an object with tokens and regex source string.\n * @api public\n */\n\nconst scan = (input, options) => {\n  const opts = options || {};\n\n  const length = input.length - 1;\n  const scanToEnd = opts.parts === true || opts.scanToEnd === true;\n  const slashes = [];\n  const tokens = [];\n  const parts = [];\n\n  let str = input;\n  let index = -1;\n  let start = 0;\n  let lastIndex = 0;\n  let isBrace = false;\n  let isBracket = false;\n  let isGlob = false;\n  let isExtglob = false;\n  let isGlobstar = false;\n  let braceEscaped = false;\n  let backslashes = false;\n  let negated = false;\n  let finished = false;\n  let braces = 0;\n  let prev;\n  let code;\n  let token = { value: '', depth: 0, isGlob: false };\n\n  const eos = () => index >= length;\n  const peek = () => str.charCodeAt(index + 1);\n  const advance = () => {\n    prev = code;\n    return str.charCodeAt(++index);\n  };\n\n  while (index < length) {\n    code = advance();\n    let next;\n\n    if (code === CHAR_BACKWARD_SLASH) {\n      backslashes = token.backslashes = true;\n      code = advance();\n\n      if (code === CHAR_LEFT_CURLY_BRACE) {\n        braceEscaped = true;\n      }\n      continue;\n    }\n\n    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {\n      braces++;\n\n      while (eos() !== true && (code = advance())) {\n        if (code === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (code === CHAR_LEFT_CURLY_BRACE) {\n          braces++;\n          continue;\n        }\n\n        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (braceEscaped !== true && code === CHAR_COMMA) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (code === CHAR_RIGHT_CURLY_BRACE) {\n          braces--;\n\n          if (braces === 0) {\n            braceEscaped = false;\n            isBrace = token.isBrace = true;\n            finished = true;\n            break;\n          }\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (code === CHAR_FORWARD_SLASH) {\n      slashes.push(index);\n      tokens.push(token);\n      token = { value: '', depth: 0, isGlob: false };\n\n      if (finished === true) continue;\n      if (prev === CHAR_DOT && index === (start + 1)) {\n        start += 2;\n        continue;\n      }\n\n      lastIndex = index + 1;\n      continue;\n    }\n\n    if (opts.noext !== true) {\n      const isExtglobChar = code === CHAR_PLUS\n        || code === CHAR_AT\n        || code === CHAR_ASTERISK\n        || code === CHAR_QUESTION_MARK\n        || code === CHAR_EXCLAMATION_MARK;\n\n      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {\n        isGlob = token.isGlob = true;\n        isExtglob = token.isExtglob = true;\n        finished = true;\n\n        if (scanToEnd === true) {\n          while (eos() !== true && (code = advance())) {\n            if (code === CHAR_BACKWARD_SLASH) {\n              backslashes = token.backslashes = true;\n              code = advance();\n              continue;\n            }\n\n            if (code === CHAR_RIGHT_PARENTHESES) {\n              isGlob = token.isGlob = true;\n              finished = true;\n              break;\n            }\n          }\n          continue;\n        }\n        break;\n      }\n    }\n\n    if (code === CHAR_ASTERISK) {\n      if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n      break;\n    }\n\n    if (code === CHAR_QUESTION_MARK) {\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n      break;\n    }\n\n    if (code === CHAR_LEFT_SQUARE_BRACKET) {\n      while (eos() !== true && (next = advance())) {\n        if (next === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\n          isBracket = token.isBracket = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n          break;\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {\n      negated = token.negated = true;\n      start++;\n      continue;\n    }\n\n    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {\n      isGlob = token.isGlob = true;\n\n      if (scanToEnd === true) {\n        while (eos() !== true && (code = advance())) {\n          if (code === CHAR_LEFT_PARENTHESES) {\n            backslashes = token.backslashes = true;\n            code = advance();\n            continue;\n          }\n\n          if (code === CHAR_RIGHT_PARENTHESES) {\n            finished = true;\n            break;\n          }\n        }\n        continue;\n      }\n      break;\n    }\n\n    if (isGlob === true) {\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n  }\n\n  if (opts.noext === true) {\n    isExtglob = false;\n    isGlob = false;\n  }\n\n  let base = str;\n  let prefix = '';\n  let glob = '';\n\n  if (start > 0) {\n    prefix = str.slice(0, start);\n    str = str.slice(start);\n    lastIndex -= start;\n  }\n\n  if (base && isGlob === true && lastIndex > 0) {\n    base = str.slice(0, lastIndex);\n    glob = str.slice(lastIndex);\n  } else if (isGlob === true) {\n    base = '';\n    glob = str;\n  } else {\n    base = str;\n  }\n\n  if (base && base !== '' && base !== '/' && base !== str) {\n    if (isPathSeparator(base.charCodeAt(base.length - 1))) {\n      base = base.slice(0, -1);\n    }\n  }\n\n  if (opts.unescape === true) {\n    if (glob) glob = utils.removeBackslashes(glob);\n\n    if (base && backslashes === true) {\n      base = utils.removeBackslashes(base);\n    }\n  }\n\n  const state = {\n    prefix,\n    input,\n    start,\n    base,\n    glob,\n    isBrace,\n    isBracket,\n    isGlob,\n    isExtglob,\n    isGlobstar,\n    negated\n  };\n\n  if (opts.tokens === true) {\n    state.maxDepth = 0;\n    if (!isPathSeparator(code)) {\n      tokens.push(token);\n    }\n    state.tokens = tokens;\n  }\n\n  if (opts.parts === true || opts.tokens === true) {\n    let prevIndex;\n\n    for (let idx = 0; idx < slashes.length; idx++) {\n      const n = prevIndex ? prevIndex + 1 : start;\n      const i = slashes[idx];\n      const value = input.slice(n, i);\n      if (opts.tokens) {\n        if (idx === 0 && start !== 0) {\n          tokens[idx].isPrefix = true;\n          tokens[idx].value = prefix;\n        } else {\n          tokens[idx].value = value;\n        }\n        depth(tokens[idx]);\n        state.maxDepth += tokens[idx].depth;\n      }\n      if (idx !== 0 || value !== '') {\n        parts.push(value);\n      }\n      prevIndex = i;\n    }\n\n    if (prevIndex && prevIndex + 1 < input.length) {\n      const value = input.slice(prevIndex + 1);\n      parts.push(value);\n\n      if (opts.tokens) {\n        tokens[tokens.length - 1].value = value;\n        depth(tokens[tokens.length - 1]);\n        state.maxDepth += tokens[tokens.length - 1].depth;\n      }\n    }\n\n    state.slashes = slashes;\n    state.parts = parts;\n  }\n\n  return state;\n};\n\nmodule.exports = scan;\n"]},"metadata":{},"sourceType":"script"}
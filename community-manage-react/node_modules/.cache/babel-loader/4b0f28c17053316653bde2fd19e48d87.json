{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.matcherHint = exports.matcherErrorMessage = exports.getLabelPrinter = exports.pluralize = exports.diff = exports.printDiffOrStringify = exports.ensureExpectedIsNonNegativeInteger = exports.ensureNumbers = exports.ensureExpectedIsNumber = exports.ensureActualIsNumber = exports.ensureNoExpected = exports.printWithType = exports.printExpected = exports.printReceived = exports.highlightTrailingWhitespace = exports.stringify = exports.SUGGEST_TO_CONTAIN_EQUAL = exports.DIM_COLOR = exports.BOLD_WEIGHT = exports.INVERTED_COLOR = exports.RECEIVED_COLOR = exports.EXPECTED_COLOR = void 0;\n\nvar _chalk = _interopRequireDefault(require('chalk'));\n\nvar _jestDiff = _interopRequireWildcard(require('jest-diff'));\n\nvar _jestGetType = _interopRequireDefault(require('jest-get-type'));\n\nvar _prettyFormat = _interopRequireDefault(require('pretty-format'));\n\nvar _Replaceable = _interopRequireDefault(require('./Replaceable'));\n\nvar _deepCyclicCopyReplaceable = _interopRequireDefault(require('./deepCyclicCopyReplaceable'));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== 'function') return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== 'object' && typeof obj !== 'function') {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint-disable local/ban-types-eventually */\n\n\nconst {\n  AsymmetricMatcher,\n  DOMCollection,\n  DOMElement,\n  Immutable,\n  ReactElement,\n  ReactTestComponent\n} = _prettyFormat.default.plugins;\nconst PLUGINS = [ReactTestComponent, ReactElement, DOMElement, DOMCollection, Immutable, AsymmetricMatcher];\nconst EXPECTED_COLOR = _chalk.default.green;\nexports.EXPECTED_COLOR = EXPECTED_COLOR;\nconst RECEIVED_COLOR = _chalk.default.red;\nexports.RECEIVED_COLOR = RECEIVED_COLOR;\nconst INVERTED_COLOR = _chalk.default.inverse;\nexports.INVERTED_COLOR = INVERTED_COLOR;\nconst BOLD_WEIGHT = _chalk.default.bold;\nexports.BOLD_WEIGHT = BOLD_WEIGHT;\nconst DIM_COLOR = _chalk.default.dim;\nexports.DIM_COLOR = DIM_COLOR;\nconst MULTILINE_REGEXP = /\\n/;\nconst SPACE_SYMBOL = '\\u{00B7}'; // middle dot\n\nconst NUMBERS = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen'];\n\nconst SUGGEST_TO_CONTAIN_EQUAL = _chalk.default.dim('Looks like you wanted to test for object/array equality with the stricter `toContain` matcher. You probably need to use `toContainEqual` instead.');\n\nexports.SUGGEST_TO_CONTAIN_EQUAL = SUGGEST_TO_CONTAIN_EQUAL;\n\nconst stringify = (object, maxDepth = 10) => {\n  const MAX_LENGTH = 10000;\n  let result;\n\n  try {\n    result = (0, _prettyFormat.default)(object, {\n      maxDepth,\n      min: true,\n      plugins: PLUGINS\n    });\n  } catch {\n    result = (0, _prettyFormat.default)(object, {\n      callToJSON: false,\n      maxDepth,\n      min: true,\n      plugins: PLUGINS\n    });\n  }\n\n  return result.length >= MAX_LENGTH && maxDepth > 1 ? stringify(object, Math.floor(maxDepth / 2)) : result;\n};\n\nexports.stringify = stringify;\n\nconst highlightTrailingWhitespace = text => text.replace(/\\s+$/gm, _chalk.default.inverse('$&')); // Instead of inverse highlight which now implies a change,\n// replace common spaces with middle dot at the end of any line.\n\n\nexports.highlightTrailingWhitespace = highlightTrailingWhitespace;\n\nconst replaceTrailingSpaces = text => text.replace(/\\s+$/gm, spaces => SPACE_SYMBOL.repeat(spaces.length));\n\nconst printReceived = object => RECEIVED_COLOR(replaceTrailingSpaces(stringify(object)));\n\nexports.printReceived = printReceived;\n\nconst printExpected = value => EXPECTED_COLOR(replaceTrailingSpaces(stringify(value)));\n\nexports.printExpected = printExpected;\n\nconst printWithType = (name, value, print) => {\n  const type = (0, _jestGetType.default)(value);\n  const hasType = type !== 'null' && type !== 'undefined' ? `${name} has type:  ${type}\\n` : '';\n  const hasValue = `${name} has value: ${print(value)}`;\n  return hasType + hasValue;\n};\n\nexports.printWithType = printWithType;\n\nconst ensureNoExpected = (expected, matcherName, options) => {\n  if (typeof expected !== 'undefined') {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(matcherErrorMessage(matcherHint(matcherString, undefined, '', options), // Because expected is omitted in hint above,\n    // expected is black instead of green in message below.\n    'this matcher must not have an expected argument', printWithType('Expected', expected, printExpected)));\n  }\n};\n/**\n * Ensures that `actual` is of type `number | bigint`\n */\n\n\nexports.ensureNoExpected = ensureNoExpected;\n\nconst ensureActualIsNumber = (actual, matcherName, options) => {\n  if (typeof actual !== 'number' && typeof actual !== 'bigint') {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(matcherErrorMessage(matcherHint(matcherString, undefined, undefined, options), `${RECEIVED_COLOR('received')} value must be a number or bigint`, printWithType('Received', actual, printReceived)));\n  }\n};\n/**\n * Ensures that `expected` is of type `number | bigint`\n */\n\n\nexports.ensureActualIsNumber = ensureActualIsNumber;\n\nconst ensureExpectedIsNumber = (expected, matcherName, options) => {\n  if (typeof expected !== 'number' && typeof expected !== 'bigint') {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(matcherErrorMessage(matcherHint(matcherString, undefined, undefined, options), `${EXPECTED_COLOR('expected')} value must be a number or bigint`, printWithType('Expected', expected, printExpected)));\n  }\n};\n/**\n * Ensures that `actual` & `expected` are of type `number | bigint`\n */\n\n\nexports.ensureExpectedIsNumber = ensureExpectedIsNumber;\n\nconst ensureNumbers = (actual, expected, matcherName, options) => {\n  ensureActualIsNumber(actual, matcherName, options);\n  ensureExpectedIsNumber(expected, matcherName, options);\n};\n\nexports.ensureNumbers = ensureNumbers;\n\nconst ensureExpectedIsNonNegativeInteger = (expected, matcherName, options) => {\n  if (typeof expected !== 'number' || !Number.isSafeInteger(expected) || expected < 0) {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(matcherErrorMessage(matcherHint(matcherString, undefined, undefined, options), `${EXPECTED_COLOR('expected')} value must be a non-negative integer`, printWithType('Expected', expected, printExpected)));\n  }\n}; // Given array of diffs, return concatenated string:\n// * include common substrings\n// * exclude change substrings which have opposite op\n// * include change substrings which have argument op\n//   with inverse highlight only if there is a common substring\n\n\nexports.ensureExpectedIsNonNegativeInteger = ensureExpectedIsNonNegativeInteger;\n\nconst getCommonAndChangedSubstrings = (diffs, op, hasCommonDiff) => diffs.reduce((reduced, diff) => reduced + (diff[0] === _jestDiff.DIFF_EQUAL ? diff[1] : diff[0] !== op ? '' : hasCommonDiff ? INVERTED_COLOR(diff[1]) : diff[1]), '');\n\nconst isLineDiffable = (expected, received) => {\n  const expectedType = (0, _jestGetType.default)(expected);\n  const receivedType = (0, _jestGetType.default)(received);\n\n  if (expectedType !== receivedType) {\n    return false;\n  }\n\n  if (_jestGetType.default.isPrimitive(expected)) {\n    // Print generic line diff for strings only:\n    // * if neither string is empty\n    // * if either string has more than one line\n    return typeof expected === 'string' && typeof received === 'string' && expected.length !== 0 && received.length !== 0 && (MULTILINE_REGEXP.test(expected) || MULTILINE_REGEXP.test(received));\n  }\n\n  if (expectedType === 'date' || expectedType === 'function' || expectedType === 'regexp') {\n    return false;\n  }\n\n  if (expected instanceof Error && received instanceof Error) {\n    return false;\n  }\n\n  if (expectedType === 'object' && typeof expected.asymmetricMatch === 'function') {\n    return false;\n  }\n\n  if (receivedType === 'object' && typeof received.asymmetricMatch === 'function') {\n    return false;\n  }\n\n  return true;\n};\n\nconst MAX_DIFF_STRING_LENGTH = 20000;\n\nconst printDiffOrStringify = (expected, received, expectedLabel, receivedLabel, expand) => {\n  if (typeof expected === 'string' && typeof received === 'string' && expected.length !== 0 && received.length !== 0 && expected.length <= MAX_DIFF_STRING_LENGTH && received.length <= MAX_DIFF_STRING_LENGTH && expected !== received) {\n    if (expected.includes('\\n') || received.includes('\\n')) {\n      return (0, _jestDiff.diffStringsUnified)(expected, received, {\n        aAnnotation: expectedLabel,\n        bAnnotation: receivedLabel,\n        changeLineTrailingSpaceColor: _chalk.default.bgYellow,\n        commonLineTrailingSpaceColor: _chalk.default.bgYellow,\n        emptyFirstOrLastLinePlaceholder: '↵',\n        // U+21B5\n        expand,\n        includeChangeCounts: true\n      });\n    }\n\n    const diffs = (0, _jestDiff.diffStringsRaw)(expected, received, true);\n    const hasCommonDiff = diffs.some(diff => diff[0] === _jestDiff.DIFF_EQUAL);\n    const printLabel = getLabelPrinter(expectedLabel, receivedLabel);\n    const expectedLine = printLabel(expectedLabel) + printExpected(getCommonAndChangedSubstrings(diffs, _jestDiff.DIFF_DELETE, hasCommonDiff));\n    const receivedLine = printLabel(receivedLabel) + printReceived(getCommonAndChangedSubstrings(diffs, _jestDiff.DIFF_INSERT, hasCommonDiff));\n    return expectedLine + '\\n' + receivedLine;\n  }\n\n  if (isLineDiffable(expected, received)) {\n    const {\n      replacedExpected,\n      replacedReceived\n    } = replaceMatchedToAsymmetricMatcher((0, _deepCyclicCopyReplaceable.default)(expected), (0, _deepCyclicCopyReplaceable.default)(received), [], []);\n    const difference = (0, _jestDiff.default)(replacedExpected, replacedReceived, {\n      aAnnotation: expectedLabel,\n      bAnnotation: receivedLabel,\n      expand,\n      includeChangeCounts: true\n    });\n\n    if (typeof difference === 'string' && difference.includes('- ' + expectedLabel) && difference.includes('+ ' + receivedLabel)) {\n      return difference;\n    }\n  }\n\n  const printLabel = getLabelPrinter(expectedLabel, receivedLabel);\n  const expectedLine = printLabel(expectedLabel) + printExpected(expected);\n  const receivedLine = printLabel(receivedLabel) + (stringify(expected) === stringify(received) ? 'serializes to the same string' : printReceived(received));\n  return expectedLine + '\\n' + receivedLine;\n}; // Sometimes, e.g. when comparing two numbers, the output from jest-diff\n// does not contain more information than the `Expected:` / `Received:` already gives.\n// In those cases, we do not print a diff to make the output shorter and not redundant.\n\n\nexports.printDiffOrStringify = printDiffOrStringify;\n\nconst shouldPrintDiff = (actual, expected) => {\n  if (typeof actual === 'number' && typeof expected === 'number') {\n    return false;\n  }\n\n  if (typeof actual === 'bigint' && typeof expected === 'bigint') {\n    return false;\n  }\n\n  if (typeof actual === 'boolean' && typeof expected === 'boolean') {\n    return false;\n  }\n\n  return true;\n};\n\nfunction replaceMatchedToAsymmetricMatcher(replacedExpected, replacedReceived, expectedCycles, receivedCycles) {\n  if (!_Replaceable.default.isReplaceable(replacedExpected, replacedReceived)) {\n    return {\n      replacedExpected,\n      replacedReceived\n    };\n  }\n\n  if (expectedCycles.includes(replacedExpected) || receivedCycles.includes(replacedReceived)) {\n    return {\n      replacedExpected,\n      replacedReceived\n    };\n  }\n\n  expectedCycles.push(replacedExpected);\n  receivedCycles.push(replacedReceived);\n  const expectedReplaceable = new _Replaceable.default(replacedExpected);\n  const receivedReplaceable = new _Replaceable.default(replacedReceived);\n  expectedReplaceable.forEach((expectedValue, key) => {\n    const receivedValue = receivedReplaceable.get(key);\n\n    if (isAsymmetricMatcher(expectedValue)) {\n      if (expectedValue.asymmetricMatch(receivedValue)) {\n        receivedReplaceable.set(key, expectedValue);\n      }\n    } else if (isAsymmetricMatcher(receivedValue)) {\n      if (receivedValue.asymmetricMatch(expectedValue)) {\n        expectedReplaceable.set(key, receivedValue);\n      }\n    } else if (_Replaceable.default.isReplaceable(expectedValue, receivedValue)) {\n      const replaced = replaceMatchedToAsymmetricMatcher(expectedValue, receivedValue, expectedCycles, receivedCycles);\n      expectedReplaceable.set(key, replaced.replacedExpected);\n      receivedReplaceable.set(key, replaced.replacedReceived);\n    }\n  });\n  return {\n    replacedExpected: expectedReplaceable.object,\n    replacedReceived: receivedReplaceable.object\n  };\n}\n\nfunction isAsymmetricMatcher(data) {\n  const type = (0, _jestGetType.default)(data);\n  return type === 'object' && typeof data.asymmetricMatch === 'function';\n}\n\nconst diff = (a, b, options) => shouldPrintDiff(a, b) ? (0, _jestDiff.default)(a, b, options) : null;\n\nexports.diff = diff;\n\nconst pluralize = (word, count) => (NUMBERS[count] || count) + ' ' + word + (count === 1 ? '' : 's'); // To display lines of labeled values as two columns with monospace alignment:\n// given the strings which will describe the values,\n// return function which given each string, returns the label:\n// string, colon, space, and enough padding spaces to align the value.\n\n\nexports.pluralize = pluralize;\n\nconst getLabelPrinter = (...strings) => {\n  const maxLength = strings.reduce((max, string) => string.length > max ? string.length : max, 0);\n  return string => `${string}: ${' '.repeat(maxLength - string.length)}`;\n};\n\nexports.getLabelPrinter = getLabelPrinter;\n\nconst matcherErrorMessage = (hint, generic, specific) => `${hint}\\n\\n${_chalk.default.bold('Matcher error')}: ${generic}${typeof specific === 'string' ? '\\n\\n' + specific : ''}`; // Display assertion for the report when a test fails.\n// New format: rejects/resolves, not, and matcher name have black color\n// Old format: matcher name has dim color\n\n\nexports.matcherErrorMessage = matcherErrorMessage;\n\nconst matcherHint = (matcherName, received = 'received', expected = 'expected', options = {}) => {\n  const {\n    comment = '',\n    expectedColor = EXPECTED_COLOR,\n    isDirectExpectCall = false,\n    // seems redundant with received === ''\n    isNot = false,\n    promise = '',\n    receivedColor = RECEIVED_COLOR,\n    secondArgument = '',\n    secondArgumentColor = EXPECTED_COLOR\n  } = options;\n  let hint = '';\n  let dimString = 'expect'; // concatenate adjacent dim substrings\n\n  if (!isDirectExpectCall && received !== '') {\n    hint += DIM_COLOR(dimString + '(') + receivedColor(received);\n    dimString = ')';\n  }\n\n  if (promise !== '') {\n    hint += DIM_COLOR(dimString + '.') + promise;\n    dimString = '';\n  }\n\n  if (isNot) {\n    hint += DIM_COLOR(dimString + '.') + 'not';\n    dimString = '';\n  }\n\n  if (matcherName.includes('.')) {\n    // Old format: for backward compatibility,\n    // especially without promise or isNot options\n    dimString += matcherName;\n  } else {\n    // New format: omit period from matcherName arg\n    hint += DIM_COLOR(dimString + '.') + matcherName;\n    dimString = '';\n  }\n\n  if (expected === '') {\n    dimString += '()';\n  } else {\n    hint += DIM_COLOR(dimString + '(') + expectedColor(expected);\n\n    if (secondArgument) {\n      hint += DIM_COLOR(', ') + secondArgumentColor(secondArgument);\n    }\n\n    dimString = ')';\n  }\n\n  if (comment !== '') {\n    dimString += ' // ' + comment;\n  }\n\n  if (dimString !== '') {\n    hint += DIM_COLOR(dimString);\n  }\n\n  return hint;\n};\n\nexports.matcherHint = matcherHint;","map":{"version":3,"sources":["D:/IDEA workspace/ZUA/community-manage-react/node_modules/jest-matcher-utils/build/index.js"],"names":["Object","defineProperty","exports","value","matcherHint","matcherErrorMessage","getLabelPrinter","pluralize","diff","printDiffOrStringify","ensureExpectedIsNonNegativeInteger","ensureNumbers","ensureExpectedIsNumber","ensureActualIsNumber","ensureNoExpected","printWithType","printExpected","printReceived","highlightTrailingWhitespace","stringify","SUGGEST_TO_CONTAIN_EQUAL","DIM_COLOR","BOLD_WEIGHT","INVERTED_COLOR","RECEIVED_COLOR","EXPECTED_COLOR","_chalk","_interopRequireDefault","require","_jestDiff","_interopRequireWildcard","_jestGetType","_prettyFormat","_Replaceable","_deepCyclicCopyReplaceable","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","default","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","AsymmetricMatcher","DOMCollection","DOMElement","Immutable","ReactElement","ReactTestComponent","plugins","PLUGINS","green","red","inverse","bold","dim","MULTILINE_REGEXP","SPACE_SYMBOL","NUMBERS","object","maxDepth","MAX_LENGTH","result","min","callToJSON","length","Math","floor","text","replace","replaceTrailingSpaces","spaces","repeat","name","print","type","hasType","hasValue","expected","matcherName","options","matcherString","Error","undefined","actual","Number","isSafeInteger","getCommonAndChangedSubstrings","diffs","op","hasCommonDiff","reduce","reduced","DIFF_EQUAL","isLineDiffable","received","expectedType","receivedType","isPrimitive","test","asymmetricMatch","MAX_DIFF_STRING_LENGTH","expectedLabel","receivedLabel","expand","includes","diffStringsUnified","aAnnotation","bAnnotation","changeLineTrailingSpaceColor","bgYellow","commonLineTrailingSpaceColor","emptyFirstOrLastLinePlaceholder","includeChangeCounts","diffStringsRaw","some","printLabel","expectedLine","DIFF_DELETE","receivedLine","DIFF_INSERT","replacedExpected","replacedReceived","replaceMatchedToAsymmetricMatcher","difference","shouldPrintDiff","expectedCycles","receivedCycles","isReplaceable","push","expectedReplaceable","receivedReplaceable","forEach","expectedValue","receivedValue","isAsymmetricMatcher","replaced","data","a","b","word","count","strings","maxLength","max","string","hint","generic","specific","comment","expectedColor","isDirectExpectCall","isNot","promise","receivedColor","secondArgument","secondArgumentColor","dimString"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,WAAR,GAAsBF,OAAO,CAACG,mBAAR,GAA8BH,OAAO,CAACI,eAAR,GAA0BJ,OAAO,CAACK,SAAR,GAAoBL,OAAO,CAACM,IAAR,GAAeN,OAAO,CAACO,oBAAR,GAA+BP,OAAO,CAACQ,kCAAR,GAA6CR,OAAO,CAACS,aAAR,GAAwBT,OAAO,CAACU,sBAAR,GAAiCV,OAAO,CAACW,oBAAR,GAA+BX,OAAO,CAACY,gBAAR,GAA2BZ,OAAO,CAACa,aAAR,GAAwBb,OAAO,CAACc,aAAR,GAAwBd,OAAO,CAACe,aAAR,GAAwBf,OAAO,CAACgB,2BAAR,GAAsChB,OAAO,CAACiB,SAAR,GAAoBjB,OAAO,CAACkB,wBAAR,GAAmClB,OAAO,CAACmB,SAAR,GAAoBnB,OAAO,CAACoB,WAAR,GAAsBpB,OAAO,CAACqB,cAAR,GAAyBrB,OAAO,CAACsB,cAAR,GAAyBtB,OAAO,CAACuB,cAAR,GAAyB,KAAK,CAA/kB;;AAEA,IAAIC,MAAM,GAAGC,sBAAsB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAnC;;AAEA,IAAIC,SAAS,GAAGC,uBAAuB,CAACF,OAAO,CAAC,WAAD,CAAR,CAAvC;;AAEA,IAAIG,YAAY,GAAGJ,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAzC;;AAEA,IAAII,aAAa,GAAGL,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAA1C;;AAEA,IAAIK,YAAY,GAAGN,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAzC;;AAEA,IAAIM,0BAA0B,GAAGP,sBAAsB,CACrDC,OAAO,CAAC,6BAAD,CAD8C,CAAvD;;AAIA,SAASO,wBAAT,GAAoC;AAClC,MAAI,OAAOC,OAAP,KAAmB,UAAvB,EAAmC,OAAO,IAAP;AACnC,MAAIC,KAAK,GAAG,IAAID,OAAJ,EAAZ;;AACAD,EAAAA,wBAAwB,GAAG,YAAY;AACrC,WAAOE,KAAP;AACD,GAFD;;AAGA,SAAOA,KAAP;AACD;;AAED,SAASP,uBAAT,CAAiCQ,GAAjC,EAAsC;AACpC,MAAIA,GAAG,IAAIA,GAAG,CAACC,UAAf,EAA2B;AACzB,WAAOD,GAAP;AACD;;AACD,MAAIA,GAAG,KAAK,IAAR,IAAiB,OAAOA,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,UAA/D,EAA4E;AAC1E,WAAO;AAACE,MAAAA,OAAO,EAAEF;AAAV,KAAP;AACD;;AACD,MAAID,KAAK,GAAGF,wBAAwB,EAApC;;AACA,MAAIE,KAAK,IAAIA,KAAK,CAACI,GAAN,CAAUH,GAAV,CAAb,EAA6B;AAC3B,WAAOD,KAAK,CAACK,GAAN,CAAUJ,GAAV,CAAP;AACD;;AACD,MAAIK,MAAM,GAAG,EAAb;AACA,MAAIC,qBAAqB,GACvB5C,MAAM,CAACC,cAAP,IAAyBD,MAAM,CAAC6C,wBADlC;;AAEA,OAAK,IAAIC,GAAT,IAAgBR,GAAhB,EAAqB;AACnB,QAAItC,MAAM,CAAC+C,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCX,GAArC,EAA0CQ,GAA1C,CAAJ,EAAoD;AAClD,UAAII,IAAI,GAAGN,qBAAqB,GAC5B5C,MAAM,CAAC6C,wBAAP,CAAgCP,GAAhC,EAAqCQ,GAArC,CAD4B,GAE5B,IAFJ;;AAGA,UAAII,IAAI,KAAKA,IAAI,CAACR,GAAL,IAAYQ,IAAI,CAACC,GAAtB,CAAR,EAAoC;AAClCnD,QAAAA,MAAM,CAACC,cAAP,CAAsB0C,MAAtB,EAA8BG,GAA9B,EAAmCI,IAAnC;AACD,OAFD,MAEO;AACLP,QAAAA,MAAM,CAACG,GAAD,CAAN,GAAcR,GAAG,CAACQ,GAAD,CAAjB;AACD;AACF;AACF;;AACDH,EAAAA,MAAM,CAACH,OAAP,GAAiBF,GAAjB;;AACA,MAAID,KAAJ,EAAW;AACTA,IAAAA,KAAK,CAACc,GAAN,CAAUb,GAAV,EAAeK,MAAf;AACD;;AACD,SAAOA,MAAP;AACD;;AAED,SAAShB,sBAAT,CAAgCW,GAAhC,EAAqC;AACnC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAACE,IAAAA,OAAO,EAAEF;AAAV,GAArC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AACA,MAAM;AACJc,EAAAA,iBADI;AAEJC,EAAAA,aAFI;AAGJC,EAAAA,UAHI;AAIJC,EAAAA,SAJI;AAKJC,EAAAA,YALI;AAMJC,EAAAA;AANI,IAOFzB,aAAa,CAACQ,OAAd,CAAsBkB,OAP1B;AAQA,MAAMC,OAAO,GAAG,CACdF,kBADc,EAEdD,YAFc,EAGdF,UAHc,EAIdD,aAJc,EAKdE,SALc,EAMdH,iBANc,CAAhB;AAQA,MAAM3B,cAAc,GAAGC,MAAM,CAACc,OAAP,CAAeoB,KAAtC;AACA1D,OAAO,CAACuB,cAAR,GAAyBA,cAAzB;AACA,MAAMD,cAAc,GAAGE,MAAM,CAACc,OAAP,CAAeqB,GAAtC;AACA3D,OAAO,CAACsB,cAAR,GAAyBA,cAAzB;AACA,MAAMD,cAAc,GAAGG,MAAM,CAACc,OAAP,CAAesB,OAAtC;AACA5D,OAAO,CAACqB,cAAR,GAAyBA,cAAzB;AACA,MAAMD,WAAW,GAAGI,MAAM,CAACc,OAAP,CAAeuB,IAAnC;AACA7D,OAAO,CAACoB,WAAR,GAAsBA,WAAtB;AACA,MAAMD,SAAS,GAAGK,MAAM,CAACc,OAAP,CAAewB,GAAjC;AACA9D,OAAO,CAACmB,SAAR,GAAoBA,SAApB;AACA,MAAM4C,gBAAgB,GAAG,IAAzB;AACA,MAAMC,YAAY,GAAG,UAArB,C,CAAiC;;AAEjC,MAAMC,OAAO,GAAG,CACd,MADc,EAEd,KAFc,EAGd,KAHc,EAId,OAJc,EAKd,MALc,EAMd,MANc,EAOd,KAPc,EAQd,OARc,EASd,OATc,EAUd,MAVc,EAWd,KAXc,EAYd,QAZc,EAad,QAbc,EAcd,UAdc,CAAhB;;AAiBA,MAAM/C,wBAAwB,GAAGM,MAAM,CAACc,OAAP,CAAewB,GAAf,CAC/B,mJAD+B,CAAjC;;AAIA9D,OAAO,CAACkB,wBAAR,GAAmCA,wBAAnC;;AAEA,MAAMD,SAAS,GAAG,CAACiD,MAAD,EAASC,QAAQ,GAAG,EAApB,KAA2B;AAC3C,QAAMC,UAAU,GAAG,KAAnB;AACA,MAAIC,MAAJ;;AAEA,MAAI;AACFA,IAAAA,MAAM,GAAG,CAAC,GAAGvC,aAAa,CAACQ,OAAlB,EAA2B4B,MAA3B,EAAmC;AAC1CC,MAAAA,QAD0C;AAE1CG,MAAAA,GAAG,EAAE,IAFqC;AAG1Cd,MAAAA,OAAO,EAAEC;AAHiC,KAAnC,CAAT;AAKD,GAND,CAME,MAAM;AACNY,IAAAA,MAAM,GAAG,CAAC,GAAGvC,aAAa,CAACQ,OAAlB,EAA2B4B,MAA3B,EAAmC;AAC1CK,MAAAA,UAAU,EAAE,KAD8B;AAE1CJ,MAAAA,QAF0C;AAG1CG,MAAAA,GAAG,EAAE,IAHqC;AAI1Cd,MAAAA,OAAO,EAAEC;AAJiC,KAAnC,CAAT;AAMD;;AAED,SAAOY,MAAM,CAACG,MAAP,IAAiBJ,UAAjB,IAA+BD,QAAQ,GAAG,CAA1C,GACHlD,SAAS,CAACiD,MAAD,EAASO,IAAI,CAACC,KAAL,CAAWP,QAAQ,GAAG,CAAtB,CAAT,CADN,GAEHE,MAFJ;AAGD,CAtBD;;AAwBArE,OAAO,CAACiB,SAAR,GAAoBA,SAApB;;AAEA,MAAMD,2BAA2B,GAAG2D,IAAI,IACtCA,IAAI,CAACC,OAAL,CAAa,QAAb,EAAuBpD,MAAM,CAACc,OAAP,CAAesB,OAAf,CAAuB,IAAvB,CAAvB,CADF,C,CACwD;AACxD;;;AAEA5D,OAAO,CAACgB,2BAAR,GAAsCA,2BAAtC;;AAEA,MAAM6D,qBAAqB,GAAGF,IAAI,IAChCA,IAAI,CAACC,OAAL,CAAa,QAAb,EAAuBE,MAAM,IAAId,YAAY,CAACe,MAAb,CAAoBD,MAAM,CAACN,MAA3B,CAAjC,CADF;;AAGA,MAAMzD,aAAa,GAAGmD,MAAM,IAC1B5C,cAAc,CAACuD,qBAAqB,CAAC5D,SAAS,CAACiD,MAAD,CAAV,CAAtB,CADhB;;AAGAlE,OAAO,CAACe,aAAR,GAAwBA,aAAxB;;AAEA,MAAMD,aAAa,GAAGb,KAAK,IACzBsB,cAAc,CAACsD,qBAAqB,CAAC5D,SAAS,CAAChB,KAAD,CAAV,CAAtB,CADhB;;AAGAD,OAAO,CAACc,aAAR,GAAwBA,aAAxB;;AAEA,MAAMD,aAAa,GAAG,CAACmE,IAAD,EAAO/E,KAAP,EAAcgF,KAAd,KAAwB;AAC5C,QAAMC,IAAI,GAAG,CAAC,GAAGrD,YAAY,CAACS,OAAjB,EAA0BrC,KAA1B,CAAb;AACA,QAAMkF,OAAO,GACXD,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,WAA5B,GACK,GAAEF,IAAK,eAAcE,IAAK,IAD/B,GAEI,EAHN;AAIA,QAAME,QAAQ,GAAI,GAAEJ,IAAK,eAAcC,KAAK,CAAChF,KAAD,CAAQ,EAApD;AACA,SAAOkF,OAAO,GAAGC,QAAjB;AACD,CARD;;AAUApF,OAAO,CAACa,aAAR,GAAwBA,aAAxB;;AAEA,MAAMD,gBAAgB,GAAG,CAACyE,QAAD,EAAWC,WAAX,EAAwBC,OAAxB,KAAoC;AAC3D,MAAI,OAAOF,QAAP,KAAoB,WAAxB,EAAqC;AACnC;AACA,UAAMG,aAAa,GAAG,CAACD,OAAO,GAAG,EAAH,GAAQ,QAAhB,IAA4BD,WAAlD;AACA,UAAM,IAAIG,KAAJ,CACJtF,mBAAmB,CACjBD,WAAW,CAACsF,aAAD,EAAgBE,SAAhB,EAA2B,EAA3B,EAA+BH,OAA/B,CADM,EACmC;AACpD;AACA,qDAHiB,EAIjB1E,aAAa,CAAC,UAAD,EAAawE,QAAb,EAAuBvE,aAAvB,CAJI,CADf,CAAN;AAQD;AACF,CAbD;AAcA;AACA;AACA;;;AAEAd,OAAO,CAACY,gBAAR,GAA2BA,gBAA3B;;AAEA,MAAMD,oBAAoB,GAAG,CAACgF,MAAD,EAASL,WAAT,EAAsBC,OAAtB,KAAkC;AAC7D,MAAI,OAAOI,MAAP,KAAkB,QAAlB,IAA8B,OAAOA,MAAP,KAAkB,QAApD,EAA8D;AAC5D;AACA,UAAMH,aAAa,GAAG,CAACD,OAAO,GAAG,EAAH,GAAQ,QAAhB,IAA4BD,WAAlD;AACA,UAAM,IAAIG,KAAJ,CACJtF,mBAAmB,CACjBD,WAAW,CAACsF,aAAD,EAAgBE,SAAhB,EAA2BA,SAA3B,EAAsCH,OAAtC,CADM,EAEhB,GAAEjE,cAAc,CAAC,UAAD,CAAa,mCAFb,EAGjBT,aAAa,CAAC,UAAD,EAAa8E,MAAb,EAAqB5E,aAArB,CAHI,CADf,CAAN;AAOD;AACF,CAZD;AAaA;AACA;AACA;;;AAEAf,OAAO,CAACW,oBAAR,GAA+BA,oBAA/B;;AAEA,MAAMD,sBAAsB,GAAG,CAAC2E,QAAD,EAAWC,WAAX,EAAwBC,OAAxB,KAAoC;AACjE,MAAI,OAAOF,QAAP,KAAoB,QAApB,IAAgC,OAAOA,QAAP,KAAoB,QAAxD,EAAkE;AAChE;AACA,UAAMG,aAAa,GAAG,CAACD,OAAO,GAAG,EAAH,GAAQ,QAAhB,IAA4BD,WAAlD;AACA,UAAM,IAAIG,KAAJ,CACJtF,mBAAmB,CACjBD,WAAW,CAACsF,aAAD,EAAgBE,SAAhB,EAA2BA,SAA3B,EAAsCH,OAAtC,CADM,EAEhB,GAAEhE,cAAc,CAAC,UAAD,CAAa,mCAFb,EAGjBV,aAAa,CAAC,UAAD,EAAawE,QAAb,EAAuBvE,aAAvB,CAHI,CADf,CAAN;AAOD;AACF,CAZD;AAaA;AACA;AACA;;;AAEAd,OAAO,CAACU,sBAAR,GAAiCA,sBAAjC;;AAEA,MAAMD,aAAa,GAAG,CAACkF,MAAD,EAASN,QAAT,EAAmBC,WAAnB,EAAgCC,OAAhC,KAA4C;AAChE5E,EAAAA,oBAAoB,CAACgF,MAAD,EAASL,WAAT,EAAsBC,OAAtB,CAApB;AACA7E,EAAAA,sBAAsB,CAAC2E,QAAD,EAAWC,WAAX,EAAwBC,OAAxB,CAAtB;AACD,CAHD;;AAKAvF,OAAO,CAACS,aAAR,GAAwBA,aAAxB;;AAEA,MAAMD,kCAAkC,GAAG,CAAC6E,QAAD,EAAWC,WAAX,EAAwBC,OAAxB,KAAoC;AAC7E,MACE,OAAOF,QAAP,KAAoB,QAApB,IACA,CAACO,MAAM,CAACC,aAAP,CAAqBR,QAArB,CADD,IAEAA,QAAQ,GAAG,CAHb,EAIE;AACA;AACA,UAAMG,aAAa,GAAG,CAACD,OAAO,GAAG,EAAH,GAAQ,QAAhB,IAA4BD,WAAlD;AACA,UAAM,IAAIG,KAAJ,CACJtF,mBAAmB,CACjBD,WAAW,CAACsF,aAAD,EAAgBE,SAAhB,EAA2BA,SAA3B,EAAsCH,OAAtC,CADM,EAEhB,GAAEhE,cAAc,CAAC,UAAD,CAAa,uCAFb,EAGjBV,aAAa,CAAC,UAAD,EAAawE,QAAb,EAAuBvE,aAAvB,CAHI,CADf,CAAN;AAOD;AACF,CAhBD,C,CAgBG;AACH;AACA;AACA;AACA;;;AAEAd,OAAO,CAACQ,kCAAR,GAA6CA,kCAA7C;;AAEA,MAAMsF,6BAA6B,GAAG,CAACC,KAAD,EAAQC,EAAR,EAAYC,aAAZ,KACpCF,KAAK,CAACG,MAAN,CACE,CAACC,OAAD,EAAU7F,IAAV,KACE6F,OAAO,IACN7F,IAAI,CAAC,CAAD,CAAJ,KAAYqB,SAAS,CAACyE,UAAtB,GACG9F,IAAI,CAAC,CAAD,CADP,GAEGA,IAAI,CAAC,CAAD,CAAJ,KAAY0F,EAAZ,GACA,EADA,GAEAC,aAAa,GACb5E,cAAc,CAACf,IAAI,CAAC,CAAD,CAAL,CADD,GAEbA,IAAI,CAAC,CAAD,CAPD,CAFX,EAUE,EAVF,CADF;;AAcA,MAAM+F,cAAc,GAAG,CAAChB,QAAD,EAAWiB,QAAX,KAAwB;AAC7C,QAAMC,YAAY,GAAG,CAAC,GAAG1E,YAAY,CAACS,OAAjB,EAA0B+C,QAA1B,CAArB;AACA,QAAMmB,YAAY,GAAG,CAAC,GAAG3E,YAAY,CAACS,OAAjB,EAA0BgE,QAA1B,CAArB;;AAEA,MAAIC,YAAY,KAAKC,YAArB,EAAmC;AACjC,WAAO,KAAP;AACD;;AAED,MAAI3E,YAAY,CAACS,OAAb,CAAqBmE,WAArB,CAAiCpB,QAAjC,CAAJ,EAAgD;AAC9C;AACA;AACA;AACA,WACE,OAAOA,QAAP,KAAoB,QAApB,IACA,OAAOiB,QAAP,KAAoB,QADpB,IAEAjB,QAAQ,CAACb,MAAT,KAAoB,CAFpB,IAGA8B,QAAQ,CAAC9B,MAAT,KAAoB,CAHpB,KAICT,gBAAgB,CAAC2C,IAAjB,CAAsBrB,QAAtB,KAAmCtB,gBAAgB,CAAC2C,IAAjB,CAAsBJ,QAAtB,CAJpC,CADF;AAOD;;AAED,MACEC,YAAY,KAAK,MAAjB,IACAA,YAAY,KAAK,UADjB,IAEAA,YAAY,KAAK,QAHnB,EAIE;AACA,WAAO,KAAP;AACD;;AAED,MAAIlB,QAAQ,YAAYI,KAApB,IAA6Ba,QAAQ,YAAYb,KAArD,EAA4D;AAC1D,WAAO,KAAP;AACD;;AAED,MACEc,YAAY,KAAK,QAAjB,IACA,OAAOlB,QAAQ,CAACsB,eAAhB,KAAoC,UAFtC,EAGE;AACA,WAAO,KAAP;AACD;;AAED,MACEH,YAAY,KAAK,QAAjB,IACA,OAAOF,QAAQ,CAACK,eAAhB,KAAoC,UAFtC,EAGE;AACA,WAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACD,CAhDD;;AAkDA,MAAMC,sBAAsB,GAAG,KAA/B;;AAEA,MAAMrG,oBAAoB,GAAG,CAC3B8E,QAD2B,EAE3BiB,QAF2B,EAG3BO,aAH2B,EAI3BC,aAJ2B,EAK3BC,MAL2B,KAMxB;AACH,MACE,OAAO1B,QAAP,KAAoB,QAApB,IACA,OAAOiB,QAAP,KAAoB,QADpB,IAEAjB,QAAQ,CAACb,MAAT,KAAoB,CAFpB,IAGA8B,QAAQ,CAAC9B,MAAT,KAAoB,CAHpB,IAIAa,QAAQ,CAACb,MAAT,IAAmBoC,sBAJnB,IAKAN,QAAQ,CAAC9B,MAAT,IAAmBoC,sBALnB,IAMAvB,QAAQ,KAAKiB,QAPf,EAQE;AACA,QAAIjB,QAAQ,CAAC2B,QAAT,CAAkB,IAAlB,KAA2BV,QAAQ,CAACU,QAAT,CAAkB,IAAlB,CAA/B,EAAwD;AACtD,aAAO,CAAC,GAAGrF,SAAS,CAACsF,kBAAd,EAAkC5B,QAAlC,EAA4CiB,QAA5C,EAAsD;AAC3DY,QAAAA,WAAW,EAAEL,aAD8C;AAE3DM,QAAAA,WAAW,EAAEL,aAF8C;AAG3DM,QAAAA,4BAA4B,EAAE5F,MAAM,CAACc,OAAP,CAAe+E,QAHc;AAI3DC,QAAAA,4BAA4B,EAAE9F,MAAM,CAACc,OAAP,CAAe+E,QAJc;AAK3DE,QAAAA,+BAA+B,EAAE,GAL0B;AAM3D;AACAR,QAAAA,MAP2D;AAQ3DS,QAAAA,mBAAmB,EAAE;AARsC,OAAtD,CAAP;AAUD;;AAED,UAAMzB,KAAK,GAAG,CAAC,GAAGpE,SAAS,CAAC8F,cAAd,EAA8BpC,QAA9B,EAAwCiB,QAAxC,EAAkD,IAAlD,CAAd;AACA,UAAML,aAAa,GAAGF,KAAK,CAAC2B,IAAN,CAAWpH,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAJ,KAAYqB,SAAS,CAACyE,UAAzC,CAAtB;AACA,UAAMuB,UAAU,GAAGvH,eAAe,CAACyG,aAAD,EAAgBC,aAAhB,CAAlC;AACA,UAAMc,YAAY,GAChBD,UAAU,CAACd,aAAD,CAAV,GACA/F,aAAa,CACXgF,6BAA6B,CAC3BC,KAD2B,EAE3BpE,SAAS,CAACkG,WAFiB,EAG3B5B,aAH2B,CADlB,CAFf;AASA,UAAM6B,YAAY,GAChBH,UAAU,CAACb,aAAD,CAAV,GACA/F,aAAa,CACX+E,6BAA6B,CAC3BC,KAD2B,EAE3BpE,SAAS,CAACoG,WAFiB,EAG3B9B,aAH2B,CADlB,CAFf;AASA,WAAO2B,YAAY,GAAG,IAAf,GAAsBE,YAA7B;AACD;;AAED,MAAIzB,cAAc,CAAChB,QAAD,EAAWiB,QAAX,CAAlB,EAAwC;AACtC,UAAM;AACJ0B,MAAAA,gBADI;AAEJC,MAAAA;AAFI,QAGFC,iCAAiC,CACnC,CAAC,GAAGlG,0BAA0B,CAACM,OAA/B,EAAwC+C,QAAxC,CADmC,EAEnC,CAAC,GAAGrD,0BAA0B,CAACM,OAA/B,EAAwCgE,QAAxC,CAFmC,EAGnC,EAHmC,EAInC,EAJmC,CAHrC;AASA,UAAM6B,UAAU,GAAG,CAAC,GAAGxG,SAAS,CAACW,OAAd,EACjB0F,gBADiB,EAEjBC,gBAFiB,EAGjB;AACEf,MAAAA,WAAW,EAAEL,aADf;AAEEM,MAAAA,WAAW,EAAEL,aAFf;AAGEC,MAAAA,MAHF;AAIES,MAAAA,mBAAmB,EAAE;AAJvB,KAHiB,CAAnB;;AAWA,QACE,OAAOW,UAAP,KAAsB,QAAtB,IACAA,UAAU,CAACnB,QAAX,CAAoB,OAAOH,aAA3B,CADA,IAEAsB,UAAU,CAACnB,QAAX,CAAoB,OAAOF,aAA3B,CAHF,EAIE;AACA,aAAOqB,UAAP;AACD;AACF;;AAED,QAAMR,UAAU,GAAGvH,eAAe,CAACyG,aAAD,EAAgBC,aAAhB,CAAlC;AACA,QAAMc,YAAY,GAAGD,UAAU,CAACd,aAAD,CAAV,GAA4B/F,aAAa,CAACuE,QAAD,CAA9D;AACA,QAAMyC,YAAY,GAChBH,UAAU,CAACb,aAAD,CAAV,IACC7F,SAAS,CAACoE,QAAD,CAAT,KAAwBpE,SAAS,CAACqF,QAAD,CAAjC,GACG,+BADH,GAEGvF,aAAa,CAACuF,QAAD,CAHjB,CADF;AAKA,SAAOsB,YAAY,GAAG,IAAf,GAAsBE,YAA7B;AACD,CA3FD,C,CA2FG;AACH;AACA;;;AAEA9H,OAAO,CAACO,oBAAR,GAA+BA,oBAA/B;;AAEA,MAAM6H,eAAe,GAAG,CAACzC,MAAD,EAASN,QAAT,KAAsB;AAC5C,MAAI,OAAOM,MAAP,KAAkB,QAAlB,IAA8B,OAAON,QAAP,KAAoB,QAAtD,EAAgE;AAC9D,WAAO,KAAP;AACD;;AAED,MAAI,OAAOM,MAAP,KAAkB,QAAlB,IAA8B,OAAON,QAAP,KAAoB,QAAtD,EAAgE;AAC9D,WAAO,KAAP;AACD;;AAED,MAAI,OAAOM,MAAP,KAAkB,SAAlB,IAA+B,OAAON,QAAP,KAAoB,SAAvD,EAAkE;AAChE,WAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACD,CAdD;;AAgBA,SAAS6C,iCAAT,CACEF,gBADF,EAEEC,gBAFF,EAGEI,cAHF,EAIEC,cAJF,EAKE;AACA,MAAI,CAACvG,YAAY,CAACO,OAAb,CAAqBiG,aAArB,CAAmCP,gBAAnC,EAAqDC,gBAArD,CAAL,EAA6E;AAC3E,WAAO;AACLD,MAAAA,gBADK;AAELC,MAAAA;AAFK,KAAP;AAID;;AAED,MACEI,cAAc,CAACrB,QAAf,CAAwBgB,gBAAxB,KACAM,cAAc,CAACtB,QAAf,CAAwBiB,gBAAxB,CAFF,EAGE;AACA,WAAO;AACLD,MAAAA,gBADK;AAELC,MAAAA;AAFK,KAAP;AAID;;AAEDI,EAAAA,cAAc,CAACG,IAAf,CAAoBR,gBAApB;AACAM,EAAAA,cAAc,CAACE,IAAf,CAAoBP,gBAApB;AACA,QAAMQ,mBAAmB,GAAG,IAAI1G,YAAY,CAACO,OAAjB,CAAyB0F,gBAAzB,CAA5B;AACA,QAAMU,mBAAmB,GAAG,IAAI3G,YAAY,CAACO,OAAjB,CAAyB2F,gBAAzB,CAA5B;AACAQ,EAAAA,mBAAmB,CAACE,OAApB,CAA4B,CAACC,aAAD,EAAgBhG,GAAhB,KAAwB;AAClD,UAAMiG,aAAa,GAAGH,mBAAmB,CAAClG,GAApB,CAAwBI,GAAxB,CAAtB;;AAEA,QAAIkG,mBAAmB,CAACF,aAAD,CAAvB,EAAwC;AACtC,UAAIA,aAAa,CAACjC,eAAd,CAA8BkC,aAA9B,CAAJ,EAAkD;AAChDH,QAAAA,mBAAmB,CAACzF,GAApB,CAAwBL,GAAxB,EAA6BgG,aAA7B;AACD;AACF,KAJD,MAIO,IAAIE,mBAAmB,CAACD,aAAD,CAAvB,EAAwC;AAC7C,UAAIA,aAAa,CAAClC,eAAd,CAA8BiC,aAA9B,CAAJ,EAAkD;AAChDH,QAAAA,mBAAmB,CAACxF,GAApB,CAAwBL,GAAxB,EAA6BiG,aAA7B;AACD;AACF,KAJM,MAIA,IACL9G,YAAY,CAACO,OAAb,CAAqBiG,aAArB,CAAmCK,aAAnC,EAAkDC,aAAlD,CADK,EAEL;AACA,YAAME,QAAQ,GAAGb,iCAAiC,CAChDU,aADgD,EAEhDC,aAFgD,EAGhDR,cAHgD,EAIhDC,cAJgD,CAAlD;AAMAG,MAAAA,mBAAmB,CAACxF,GAApB,CAAwBL,GAAxB,EAA6BmG,QAAQ,CAACf,gBAAtC;AACAU,MAAAA,mBAAmB,CAACzF,GAApB,CAAwBL,GAAxB,EAA6BmG,QAAQ,CAACd,gBAAtC;AACD;AACF,GAvBD;AAwBA,SAAO;AACLD,IAAAA,gBAAgB,EAAES,mBAAmB,CAACvE,MADjC;AAEL+D,IAAAA,gBAAgB,EAAES,mBAAmB,CAACxE;AAFjC,GAAP;AAID;;AAED,SAAS4E,mBAAT,CAA6BE,IAA7B,EAAmC;AACjC,QAAM9D,IAAI,GAAG,CAAC,GAAGrD,YAAY,CAACS,OAAjB,EAA0B0G,IAA1B,CAAb;AACA,SAAO9D,IAAI,KAAK,QAAT,IAAqB,OAAO8D,IAAI,CAACrC,eAAZ,KAAgC,UAA5D;AACD;;AAED,MAAMrG,IAAI,GAAG,CAAC2I,CAAD,EAAIC,CAAJ,EAAO3D,OAAP,KACX6C,eAAe,CAACa,CAAD,EAAIC,CAAJ,CAAf,GAAwB,CAAC,GAAGvH,SAAS,CAACW,OAAd,EAAuB2G,CAAvB,EAA0BC,CAA1B,EAA6B3D,OAA7B,CAAxB,GAAgE,IADlE;;AAGAvF,OAAO,CAACM,IAAR,GAAeA,IAAf;;AAEA,MAAMD,SAAS,GAAG,CAAC8I,IAAD,EAAOC,KAAP,KAChB,CAACnF,OAAO,CAACmF,KAAD,CAAP,IAAkBA,KAAnB,IAA4B,GAA5B,GAAkCD,IAAlC,IAA0CC,KAAK,KAAK,CAAV,GAAc,EAAd,GAAmB,GAA7D,CADF,C,CACqE;AACrE;AACA;AACA;;;AAEApJ,OAAO,CAACK,SAAR,GAAoBA,SAApB;;AAEA,MAAMD,eAAe,GAAG,CAAC,GAAGiJ,OAAJ,KAAgB;AACtC,QAAMC,SAAS,GAAGD,OAAO,CAACnD,MAAR,CAChB,CAACqD,GAAD,EAAMC,MAAN,KAAkBA,MAAM,CAAChF,MAAP,GAAgB+E,GAAhB,GAAsBC,MAAM,CAAChF,MAA7B,GAAsC+E,GADxC,EAEhB,CAFgB,CAAlB;AAIA,SAAOC,MAAM,IAAK,GAAEA,MAAO,KAAI,IAAIzE,MAAJ,CAAWuE,SAAS,GAAGE,MAAM,CAAChF,MAA9B,CAAsC,EAArE;AACD,CAND;;AAQAxE,OAAO,CAACI,eAAR,GAA0BA,eAA1B;;AAEA,MAAMD,mBAAmB,GAAG,CAACsJ,IAAD,EAAOC,OAAP,EAAgBC,QAAhB,KACzB,GAAEF,IAAK,OAAMjI,MAAM,CAACc,OAAP,CAAeuB,IAAf,CAAoB,eAApB,CAAqC,KAAI6F,OAAQ,GAC7D,OAAOC,QAAP,KAAoB,QAApB,GAA+B,SAASA,QAAxC,GAAmD,EACpD,EAHH,C,CAGM;AACN;AACA;;;AAEA3J,OAAO,CAACG,mBAAR,GAA8BA,mBAA9B;;AAEA,MAAMD,WAAW,GAAG,CAClBoF,WADkB,EAElBgB,QAAQ,GAAG,UAFO,EAGlBjB,QAAQ,GAAG,UAHO,EAIlBE,OAAO,GAAG,EAJQ,KAKf;AACH,QAAM;AACJqE,IAAAA,OAAO,GAAG,EADN;AAEJC,IAAAA,aAAa,GAAGtI,cAFZ;AAGJuI,IAAAA,kBAAkB,GAAG,KAHjB;AAIJ;AACAC,IAAAA,KAAK,GAAG,KALJ;AAMJC,IAAAA,OAAO,GAAG,EANN;AAOJC,IAAAA,aAAa,GAAG3I,cAPZ;AAQJ4I,IAAAA,cAAc,GAAG,EARb;AASJC,IAAAA,mBAAmB,GAAG5I;AATlB,MAUFgE,OAVJ;AAWA,MAAIkE,IAAI,GAAG,EAAX;AACA,MAAIW,SAAS,GAAG,QAAhB,CAbG,CAauB;;AAE1B,MAAI,CAACN,kBAAD,IAAuBxD,QAAQ,KAAK,EAAxC,EAA4C;AAC1CmD,IAAAA,IAAI,IAAItI,SAAS,CAACiJ,SAAS,GAAG,GAAb,CAAT,GAA6BH,aAAa,CAAC3D,QAAD,CAAlD;AACA8D,IAAAA,SAAS,GAAG,GAAZ;AACD;;AAED,MAAIJ,OAAO,KAAK,EAAhB,EAAoB;AAClBP,IAAAA,IAAI,IAAItI,SAAS,CAACiJ,SAAS,GAAG,GAAb,CAAT,GAA6BJ,OAArC;AACAI,IAAAA,SAAS,GAAG,EAAZ;AACD;;AAED,MAAIL,KAAJ,EAAW;AACTN,IAAAA,IAAI,IAAItI,SAAS,CAACiJ,SAAS,GAAG,GAAb,CAAT,GAA6B,KAArC;AACAA,IAAAA,SAAS,GAAG,EAAZ;AACD;;AAED,MAAI9E,WAAW,CAAC0B,QAAZ,CAAqB,GAArB,CAAJ,EAA+B;AAC7B;AACA;AACAoD,IAAAA,SAAS,IAAI9E,WAAb;AACD,GAJD,MAIO;AACL;AACAmE,IAAAA,IAAI,IAAItI,SAAS,CAACiJ,SAAS,GAAG,GAAb,CAAT,GAA6B9E,WAArC;AACA8E,IAAAA,SAAS,GAAG,EAAZ;AACD;;AAED,MAAI/E,QAAQ,KAAK,EAAjB,EAAqB;AACnB+E,IAAAA,SAAS,IAAI,IAAb;AACD,GAFD,MAEO;AACLX,IAAAA,IAAI,IAAItI,SAAS,CAACiJ,SAAS,GAAG,GAAb,CAAT,GAA6BP,aAAa,CAACxE,QAAD,CAAlD;;AAEA,QAAI6E,cAAJ,EAAoB;AAClBT,MAAAA,IAAI,IAAItI,SAAS,CAAC,IAAD,CAAT,GAAkBgJ,mBAAmB,CAACD,cAAD,CAA7C;AACD;;AAEDE,IAAAA,SAAS,GAAG,GAAZ;AACD;;AAED,MAAIR,OAAO,KAAK,EAAhB,EAAoB;AAClBQ,IAAAA,SAAS,IAAI,SAASR,OAAtB;AACD;;AAED,MAAIQ,SAAS,KAAK,EAAlB,EAAsB;AACpBX,IAAAA,IAAI,IAAItI,SAAS,CAACiJ,SAAD,CAAjB;AACD;;AAED,SAAOX,IAAP;AACD,CAlED;;AAoEAzJ,OAAO,CAACE,WAAR,GAAsBA,WAAtB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.matcherHint = exports.matcherErrorMessage = exports.getLabelPrinter = exports.pluralize = exports.diff = exports.printDiffOrStringify = exports.ensureExpectedIsNonNegativeInteger = exports.ensureNumbers = exports.ensureExpectedIsNumber = exports.ensureActualIsNumber = exports.ensureNoExpected = exports.printWithType = exports.printExpected = exports.printReceived = exports.highlightTrailingWhitespace = exports.stringify = exports.SUGGEST_TO_CONTAIN_EQUAL = exports.DIM_COLOR = exports.BOLD_WEIGHT = exports.INVERTED_COLOR = exports.RECEIVED_COLOR = exports.EXPECTED_COLOR = void 0;\n\nvar _chalk = _interopRequireDefault(require('chalk'));\n\nvar _jestDiff = _interopRequireWildcard(require('jest-diff'));\n\nvar _jestGetType = _interopRequireDefault(require('jest-get-type'));\n\nvar _prettyFormat = _interopRequireDefault(require('pretty-format'));\n\nvar _Replaceable = _interopRequireDefault(require('./Replaceable'));\n\nvar _deepCyclicCopyReplaceable = _interopRequireDefault(\n  require('./deepCyclicCopyReplaceable')\n);\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== 'function') return null;\n  var cache = new WeakMap();\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    return {default: obj};\n  }\n  var cache = _getRequireWildcardCache();\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor =\n    Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor\n        ? Object.getOwnPropertyDescriptor(obj, key)\n        : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint-disable local/ban-types-eventually */\nconst {\n  AsymmetricMatcher,\n  DOMCollection,\n  DOMElement,\n  Immutable,\n  ReactElement,\n  ReactTestComponent\n} = _prettyFormat.default.plugins;\nconst PLUGINS = [\n  ReactTestComponent,\n  ReactElement,\n  DOMElement,\n  DOMCollection,\n  Immutable,\n  AsymmetricMatcher\n];\nconst EXPECTED_COLOR = _chalk.default.green;\nexports.EXPECTED_COLOR = EXPECTED_COLOR;\nconst RECEIVED_COLOR = _chalk.default.red;\nexports.RECEIVED_COLOR = RECEIVED_COLOR;\nconst INVERTED_COLOR = _chalk.default.inverse;\nexports.INVERTED_COLOR = INVERTED_COLOR;\nconst BOLD_WEIGHT = _chalk.default.bold;\nexports.BOLD_WEIGHT = BOLD_WEIGHT;\nconst DIM_COLOR = _chalk.default.dim;\nexports.DIM_COLOR = DIM_COLOR;\nconst MULTILINE_REGEXP = /\\n/;\nconst SPACE_SYMBOL = '\\u{00B7}'; // middle dot\n\nconst NUMBERS = [\n  'zero',\n  'one',\n  'two',\n  'three',\n  'four',\n  'five',\n  'six',\n  'seven',\n  'eight',\n  'nine',\n  'ten',\n  'eleven',\n  'twelve',\n  'thirteen'\n];\n\nconst SUGGEST_TO_CONTAIN_EQUAL = _chalk.default.dim(\n  'Looks like you wanted to test for object/array equality with the stricter `toContain` matcher. You probably need to use `toContainEqual` instead.'\n);\n\nexports.SUGGEST_TO_CONTAIN_EQUAL = SUGGEST_TO_CONTAIN_EQUAL;\n\nconst stringify = (object, maxDepth = 10) => {\n  const MAX_LENGTH = 10000;\n  let result;\n\n  try {\n    result = (0, _prettyFormat.default)(object, {\n      maxDepth,\n      min: true,\n      plugins: PLUGINS\n    });\n  } catch {\n    result = (0, _prettyFormat.default)(object, {\n      callToJSON: false,\n      maxDepth,\n      min: true,\n      plugins: PLUGINS\n    });\n  }\n\n  return result.length >= MAX_LENGTH && maxDepth > 1\n    ? stringify(object, Math.floor(maxDepth / 2))\n    : result;\n};\n\nexports.stringify = stringify;\n\nconst highlightTrailingWhitespace = text =>\n  text.replace(/\\s+$/gm, _chalk.default.inverse('$&')); // Instead of inverse highlight which now implies a change,\n// replace common spaces with middle dot at the end of any line.\n\nexports.highlightTrailingWhitespace = highlightTrailingWhitespace;\n\nconst replaceTrailingSpaces = text =>\n  text.replace(/\\s+$/gm, spaces => SPACE_SYMBOL.repeat(spaces.length));\n\nconst printReceived = object =>\n  RECEIVED_COLOR(replaceTrailingSpaces(stringify(object)));\n\nexports.printReceived = printReceived;\n\nconst printExpected = value =>\n  EXPECTED_COLOR(replaceTrailingSpaces(stringify(value)));\n\nexports.printExpected = printExpected;\n\nconst printWithType = (name, value, print) => {\n  const type = (0, _jestGetType.default)(value);\n  const hasType =\n    type !== 'null' && type !== 'undefined'\n      ? `${name} has type:  ${type}\\n`\n      : '';\n  const hasValue = `${name} has value: ${print(value)}`;\n  return hasType + hasValue;\n};\n\nexports.printWithType = printWithType;\n\nconst ensureNoExpected = (expected, matcherName, options) => {\n  if (typeof expected !== 'undefined') {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(\n      matcherErrorMessage(\n        matcherHint(matcherString, undefined, '', options), // Because expected is omitted in hint above,\n        // expected is black instead of green in message below.\n        'this matcher must not have an expected argument',\n        printWithType('Expected', expected, printExpected)\n      )\n    );\n  }\n};\n/**\n * Ensures that `actual` is of type `number | bigint`\n */\n\nexports.ensureNoExpected = ensureNoExpected;\n\nconst ensureActualIsNumber = (actual, matcherName, options) => {\n  if (typeof actual !== 'number' && typeof actual !== 'bigint') {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(\n      matcherErrorMessage(\n        matcherHint(matcherString, undefined, undefined, options),\n        `${RECEIVED_COLOR('received')} value must be a number or bigint`,\n        printWithType('Received', actual, printReceived)\n      )\n    );\n  }\n};\n/**\n * Ensures that `expected` is of type `number | bigint`\n */\n\nexports.ensureActualIsNumber = ensureActualIsNumber;\n\nconst ensureExpectedIsNumber = (expected, matcherName, options) => {\n  if (typeof expected !== 'number' && typeof expected !== 'bigint') {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(\n      matcherErrorMessage(\n        matcherHint(matcherString, undefined, undefined, options),\n        `${EXPECTED_COLOR('expected')} value must be a number or bigint`,\n        printWithType('Expected', expected, printExpected)\n      )\n    );\n  }\n};\n/**\n * Ensures that `actual` & `expected` are of type `number | bigint`\n */\n\nexports.ensureExpectedIsNumber = ensureExpectedIsNumber;\n\nconst ensureNumbers = (actual, expected, matcherName, options) => {\n  ensureActualIsNumber(actual, matcherName, options);\n  ensureExpectedIsNumber(expected, matcherName, options);\n};\n\nexports.ensureNumbers = ensureNumbers;\n\nconst ensureExpectedIsNonNegativeInteger = (expected, matcherName, options) => {\n  if (\n    typeof expected !== 'number' ||\n    !Number.isSafeInteger(expected) ||\n    expected < 0\n  ) {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(\n      matcherErrorMessage(\n        matcherHint(matcherString, undefined, undefined, options),\n        `${EXPECTED_COLOR('expected')} value must be a non-negative integer`,\n        printWithType('Expected', expected, printExpected)\n      )\n    );\n  }\n}; // Given array of diffs, return concatenated string:\n// * include common substrings\n// * exclude change substrings which have opposite op\n// * include change substrings which have argument op\n//   with inverse highlight only if there is a common substring\n\nexports.ensureExpectedIsNonNegativeInteger = ensureExpectedIsNonNegativeInteger;\n\nconst getCommonAndChangedSubstrings = (diffs, op, hasCommonDiff) =>\n  diffs.reduce(\n    (reduced, diff) =>\n      reduced +\n      (diff[0] === _jestDiff.DIFF_EQUAL\n        ? diff[1]\n        : diff[0] !== op\n        ? ''\n        : hasCommonDiff\n        ? INVERTED_COLOR(diff[1])\n        : diff[1]),\n    ''\n  );\n\nconst isLineDiffable = (expected, received) => {\n  const expectedType = (0, _jestGetType.default)(expected);\n  const receivedType = (0, _jestGetType.default)(received);\n\n  if (expectedType !== receivedType) {\n    return false;\n  }\n\n  if (_jestGetType.default.isPrimitive(expected)) {\n    // Print generic line diff for strings only:\n    // * if neither string is empty\n    // * if either string has more than one line\n    return (\n      typeof expected === 'string' &&\n      typeof received === 'string' &&\n      expected.length !== 0 &&\n      received.length !== 0 &&\n      (MULTILINE_REGEXP.test(expected) || MULTILINE_REGEXP.test(received))\n    );\n  }\n\n  if (\n    expectedType === 'date' ||\n    expectedType === 'function' ||\n    expectedType === 'regexp'\n  ) {\n    return false;\n  }\n\n  if (expected instanceof Error && received instanceof Error) {\n    return false;\n  }\n\n  if (\n    expectedType === 'object' &&\n    typeof expected.asymmetricMatch === 'function'\n  ) {\n    return false;\n  }\n\n  if (\n    receivedType === 'object' &&\n    typeof received.asymmetricMatch === 'function'\n  ) {\n    return false;\n  }\n\n  return true;\n};\n\nconst MAX_DIFF_STRING_LENGTH = 20000;\n\nconst printDiffOrStringify = (\n  expected,\n  received,\n  expectedLabel,\n  receivedLabel,\n  expand\n) => {\n  if (\n    typeof expected === 'string' &&\n    typeof received === 'string' &&\n    expected.length !== 0 &&\n    received.length !== 0 &&\n    expected.length <= MAX_DIFF_STRING_LENGTH &&\n    received.length <= MAX_DIFF_STRING_LENGTH &&\n    expected !== received\n  ) {\n    if (expected.includes('\\n') || received.includes('\\n')) {\n      return (0, _jestDiff.diffStringsUnified)(expected, received, {\n        aAnnotation: expectedLabel,\n        bAnnotation: receivedLabel,\n        changeLineTrailingSpaceColor: _chalk.default.bgYellow,\n        commonLineTrailingSpaceColor: _chalk.default.bgYellow,\n        emptyFirstOrLastLinePlaceholder: '↵',\n        // U+21B5\n        expand,\n        includeChangeCounts: true\n      });\n    }\n\n    const diffs = (0, _jestDiff.diffStringsRaw)(expected, received, true);\n    const hasCommonDiff = diffs.some(diff => diff[0] === _jestDiff.DIFF_EQUAL);\n    const printLabel = getLabelPrinter(expectedLabel, receivedLabel);\n    const expectedLine =\n      printLabel(expectedLabel) +\n      printExpected(\n        getCommonAndChangedSubstrings(\n          diffs,\n          _jestDiff.DIFF_DELETE,\n          hasCommonDiff\n        )\n      );\n    const receivedLine =\n      printLabel(receivedLabel) +\n      printReceived(\n        getCommonAndChangedSubstrings(\n          diffs,\n          _jestDiff.DIFF_INSERT,\n          hasCommonDiff\n        )\n      );\n    return expectedLine + '\\n' + receivedLine;\n  }\n\n  if (isLineDiffable(expected, received)) {\n    const {\n      replacedExpected,\n      replacedReceived\n    } = replaceMatchedToAsymmetricMatcher(\n      (0, _deepCyclicCopyReplaceable.default)(expected),\n      (0, _deepCyclicCopyReplaceable.default)(received),\n      [],\n      []\n    );\n    const difference = (0, _jestDiff.default)(\n      replacedExpected,\n      replacedReceived,\n      {\n        aAnnotation: expectedLabel,\n        bAnnotation: receivedLabel,\n        expand,\n        includeChangeCounts: true\n      }\n    );\n\n    if (\n      typeof difference === 'string' &&\n      difference.includes('- ' + expectedLabel) &&\n      difference.includes('+ ' + receivedLabel)\n    ) {\n      return difference;\n    }\n  }\n\n  const printLabel = getLabelPrinter(expectedLabel, receivedLabel);\n  const expectedLine = printLabel(expectedLabel) + printExpected(expected);\n  const receivedLine =\n    printLabel(receivedLabel) +\n    (stringify(expected) === stringify(received)\n      ? 'serializes to the same string'\n      : printReceived(received));\n  return expectedLine + '\\n' + receivedLine;\n}; // Sometimes, e.g. when comparing two numbers, the output from jest-diff\n// does not contain more information than the `Expected:` / `Received:` already gives.\n// In those cases, we do not print a diff to make the output shorter and not redundant.\n\nexports.printDiffOrStringify = printDiffOrStringify;\n\nconst shouldPrintDiff = (actual, expected) => {\n  if (typeof actual === 'number' && typeof expected === 'number') {\n    return false;\n  }\n\n  if (typeof actual === 'bigint' && typeof expected === 'bigint') {\n    return false;\n  }\n\n  if (typeof actual === 'boolean' && typeof expected === 'boolean') {\n    return false;\n  }\n\n  return true;\n};\n\nfunction replaceMatchedToAsymmetricMatcher(\n  replacedExpected,\n  replacedReceived,\n  expectedCycles,\n  receivedCycles\n) {\n  if (!_Replaceable.default.isReplaceable(replacedExpected, replacedReceived)) {\n    return {\n      replacedExpected,\n      replacedReceived\n    };\n  }\n\n  if (\n    expectedCycles.includes(replacedExpected) ||\n    receivedCycles.includes(replacedReceived)\n  ) {\n    return {\n      replacedExpected,\n      replacedReceived\n    };\n  }\n\n  expectedCycles.push(replacedExpected);\n  receivedCycles.push(replacedReceived);\n  const expectedReplaceable = new _Replaceable.default(replacedExpected);\n  const receivedReplaceable = new _Replaceable.default(replacedReceived);\n  expectedReplaceable.forEach((expectedValue, key) => {\n    const receivedValue = receivedReplaceable.get(key);\n\n    if (isAsymmetricMatcher(expectedValue)) {\n      if (expectedValue.asymmetricMatch(receivedValue)) {\n        receivedReplaceable.set(key, expectedValue);\n      }\n    } else if (isAsymmetricMatcher(receivedValue)) {\n      if (receivedValue.asymmetricMatch(expectedValue)) {\n        expectedReplaceable.set(key, receivedValue);\n      }\n    } else if (\n      _Replaceable.default.isReplaceable(expectedValue, receivedValue)\n    ) {\n      const replaced = replaceMatchedToAsymmetricMatcher(\n        expectedValue,\n        receivedValue,\n        expectedCycles,\n        receivedCycles\n      );\n      expectedReplaceable.set(key, replaced.replacedExpected);\n      receivedReplaceable.set(key, replaced.replacedReceived);\n    }\n  });\n  return {\n    replacedExpected: expectedReplaceable.object,\n    replacedReceived: receivedReplaceable.object\n  };\n}\n\nfunction isAsymmetricMatcher(data) {\n  const type = (0, _jestGetType.default)(data);\n  return type === 'object' && typeof data.asymmetricMatch === 'function';\n}\n\nconst diff = (a, b, options) =>\n  shouldPrintDiff(a, b) ? (0, _jestDiff.default)(a, b, options) : null;\n\nexports.diff = diff;\n\nconst pluralize = (word, count) =>\n  (NUMBERS[count] || count) + ' ' + word + (count === 1 ? '' : 's'); // To display lines of labeled values as two columns with monospace alignment:\n// given the strings which will describe the values,\n// return function which given each string, returns the label:\n// string, colon, space, and enough padding spaces to align the value.\n\nexports.pluralize = pluralize;\n\nconst getLabelPrinter = (...strings) => {\n  const maxLength = strings.reduce(\n    (max, string) => (string.length > max ? string.length : max),\n    0\n  );\n  return string => `${string}: ${' '.repeat(maxLength - string.length)}`;\n};\n\nexports.getLabelPrinter = getLabelPrinter;\n\nconst matcherErrorMessage = (hint, generic, specific) =>\n  `${hint}\\n\\n${_chalk.default.bold('Matcher error')}: ${generic}${\n    typeof specific === 'string' ? '\\n\\n' + specific : ''\n  }`; // Display assertion for the report when a test fails.\n// New format: rejects/resolves, not, and matcher name have black color\n// Old format: matcher name has dim color\n\nexports.matcherErrorMessage = matcherErrorMessage;\n\nconst matcherHint = (\n  matcherName,\n  received = 'received',\n  expected = 'expected',\n  options = {}\n) => {\n  const {\n    comment = '',\n    expectedColor = EXPECTED_COLOR,\n    isDirectExpectCall = false,\n    // seems redundant with received === ''\n    isNot = false,\n    promise = '',\n    receivedColor = RECEIVED_COLOR,\n    secondArgument = '',\n    secondArgumentColor = EXPECTED_COLOR\n  } = options;\n  let hint = '';\n  let dimString = 'expect'; // concatenate adjacent dim substrings\n\n  if (!isDirectExpectCall && received !== '') {\n    hint += DIM_COLOR(dimString + '(') + receivedColor(received);\n    dimString = ')';\n  }\n\n  if (promise !== '') {\n    hint += DIM_COLOR(dimString + '.') + promise;\n    dimString = '';\n  }\n\n  if (isNot) {\n    hint += DIM_COLOR(dimString + '.') + 'not';\n    dimString = '';\n  }\n\n  if (matcherName.includes('.')) {\n    // Old format: for backward compatibility,\n    // especially without promise or isNot options\n    dimString += matcherName;\n  } else {\n    // New format: omit period from matcherName arg\n    hint += DIM_COLOR(dimString + '.') + matcherName;\n    dimString = '';\n  }\n\n  if (expected === '') {\n    dimString += '()';\n  } else {\n    hint += DIM_COLOR(dimString + '(') + expectedColor(expected);\n\n    if (secondArgument) {\n      hint += DIM_COLOR(', ') + secondArgumentColor(secondArgument);\n    }\n\n    dimString = ')';\n  }\n\n  if (comment !== '') {\n    dimString += ' // ' + comment;\n  }\n\n  if (dimString !== '') {\n    hint += DIM_COLOR(dimString);\n  }\n\n  return hint;\n};\n\nexports.matcherHint = matcherHint;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _cleanupSemantic = require('./cleanupSemantic');\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // Given change op and array of diffs, return concatenated string:\n// * include common strings\n// * include change strings which have argument op with changeColor\n// * exclude change strings which have opposite op\n\n\nconst concatenateRelevantDiffs = (op, diffs, changeColor) => diffs.reduce((reduced, diff) => reduced + (diff[0] === _cleanupSemantic.DIFF_EQUAL ? diff[1] : diff[0] === op && diff[1].length !== 0 // empty if change is newline\n? changeColor(diff[1]) : ''), ''); // Encapsulate change lines until either a common newline or the end.\n\n\nclass ChangeBuffer {\n  // incomplete line\n  // complete lines\n  constructor(op, changeColor) {\n    _defineProperty(this, 'op', void 0);\n\n    _defineProperty(this, 'line', void 0);\n\n    _defineProperty(this, 'lines', void 0);\n\n    _defineProperty(this, 'changeColor', void 0);\n\n    this.op = op;\n    this.line = [];\n    this.lines = [];\n    this.changeColor = changeColor;\n  }\n\n  pushSubstring(substring) {\n    this.pushDiff(new _cleanupSemantic.Diff(this.op, substring));\n  }\n\n  pushLine() {\n    // Assume call only if line has at least one diff,\n    // therefore an empty line must have a diff which has an empty string.\n    // If line has multiple diffs, then assume it has a common diff,\n    // therefore change diffs have change color;\n    // otherwise then it has line color only.\n    this.lines.push(this.line.length !== 1 ? new _cleanupSemantic.Diff(this.op, concatenateRelevantDiffs(this.op, this.line, this.changeColor)) : this.line[0][0] === this.op ? this.line[0] // can use instance\n    : new _cleanupSemantic.Diff(this.op, this.line[0][1]) // was common diff\n    );\n    this.line.length = 0;\n  }\n\n  isLineEmpty() {\n    return this.line.length === 0;\n  } // Minor input to buffer.\n\n\n  pushDiff(diff) {\n    this.line.push(diff);\n  } // Main input to buffer.\n\n\n  align(diff) {\n    const string = diff[1];\n\n    if (string.includes('\\n')) {\n      const substrings = string.split('\\n');\n      const iLast = substrings.length - 1;\n      substrings.forEach((substring, i) => {\n        if (i < iLast) {\n          // The first substring completes the current change line.\n          // A middle substring is a change line.\n          this.pushSubstring(substring);\n          this.pushLine();\n        } else if (substring.length !== 0) {\n          // The last substring starts a change line, if it is not empty.\n          // Important: This non-empty condition also automatically omits\n          // the newline appended to the end of expected and received strings.\n          this.pushSubstring(substring);\n        }\n      });\n    } else {\n      // Append non-multiline string to current change line.\n      this.pushDiff(diff);\n    }\n  } // Output from buffer.\n\n\n  moveLinesTo(lines) {\n    if (!this.isLineEmpty()) {\n      this.pushLine();\n    }\n\n    lines.push(...this.lines);\n    this.lines.length = 0;\n  }\n\n} // Encapsulate common and change lines.\n\n\nclass CommonBuffer {\n  constructor(deleteBuffer, insertBuffer) {\n    _defineProperty(this, 'deleteBuffer', void 0);\n\n    _defineProperty(this, 'insertBuffer', void 0);\n\n    _defineProperty(this, 'lines', void 0);\n\n    this.deleteBuffer = deleteBuffer;\n    this.insertBuffer = insertBuffer;\n    this.lines = [];\n  }\n\n  pushDiffCommonLine(diff) {\n    this.lines.push(diff);\n  }\n\n  pushDiffChangeLines(diff) {\n    const isDiffEmpty = diff[1].length === 0; // An empty diff string is redundant, unless a change line is empty.\n\n    if (!isDiffEmpty || this.deleteBuffer.isLineEmpty()) {\n      this.deleteBuffer.pushDiff(diff);\n    }\n\n    if (!isDiffEmpty || this.insertBuffer.isLineEmpty()) {\n      this.insertBuffer.pushDiff(diff);\n    }\n  }\n\n  flushChangeLines() {\n    this.deleteBuffer.moveLinesTo(this.lines);\n    this.insertBuffer.moveLinesTo(this.lines);\n  } // Input to buffer.\n\n\n  align(diff) {\n    const op = diff[0];\n    const string = diff[1];\n\n    if (string.includes('\\n')) {\n      const substrings = string.split('\\n');\n      const iLast = substrings.length - 1;\n      substrings.forEach((substring, i) => {\n        if (i === 0) {\n          const subdiff = new _cleanupSemantic.Diff(op, substring);\n\n          if (this.deleteBuffer.isLineEmpty() && this.insertBuffer.isLineEmpty()) {\n            // If both current change lines are empty,\n            // then the first substring is a common line.\n            this.flushChangeLines();\n            this.pushDiffCommonLine(subdiff);\n          } else {\n            // If either current change line is non-empty,\n            // then the first substring completes the change lines.\n            this.pushDiffChangeLines(subdiff);\n            this.flushChangeLines();\n          }\n        } else if (i < iLast) {\n          // A middle substring is a common line.\n          this.pushDiffCommonLine(new _cleanupSemantic.Diff(op, substring));\n        } else if (substring.length !== 0) {\n          // The last substring starts a change line, if it is not empty.\n          // Important: This non-empty condition also automatically omits\n          // the newline appended to the end of expected and received strings.\n          this.pushDiffChangeLines(new _cleanupSemantic.Diff(op, substring));\n        }\n      });\n    } else {\n      // Append non-multiline string to current change lines.\n      // Important: It cannot be at the end following empty change lines,\n      // because newline appended to the end of expected and received strings.\n      this.pushDiffChangeLines(diff);\n    }\n  } // Output from buffer.\n\n\n  getLines() {\n    this.flushChangeLines();\n    return this.lines;\n  }\n\n} // Given diffs from expected and received strings,\n// return new array of diffs split or joined into lines.\n//\n// To correctly align a change line at the end, the algorithm:\n// * assumes that a newline was appended to the strings\n// * omits the last newline from the output array\n//\n// Assume the function is not called:\n// * if either expected or received is empty string\n// * if neither expected nor received is multiline string\n\n\nconst getAlignedDiffs = (diffs, changeColor) => {\n  const deleteBuffer = new ChangeBuffer(_cleanupSemantic.DIFF_DELETE, changeColor);\n  const insertBuffer = new ChangeBuffer(_cleanupSemantic.DIFF_INSERT, changeColor);\n  const commonBuffer = new CommonBuffer(deleteBuffer, insertBuffer);\n  diffs.forEach(diff => {\n    switch (diff[0]) {\n      case _cleanupSemantic.DIFF_DELETE:\n        deleteBuffer.align(diff);\n        break;\n\n      case _cleanupSemantic.DIFF_INSERT:\n        insertBuffer.align(diff);\n        break;\n\n      default:\n        commonBuffer.align(diff);\n    }\n  });\n  return commonBuffer.getLines();\n};\n\nvar _default = getAlignedDiffs;\nexports.default = _default;","map":{"version":3,"sources":["D:/IDEA workspace/ZUA/community-manage-react/node_modules/jest-diff/build/getAlignedDiffs.js"],"names":["Object","defineProperty","exports","value","default","_cleanupSemantic","require","_defineProperty","obj","key","enumerable","configurable","writable","concatenateRelevantDiffs","op","diffs","changeColor","reduce","reduced","diff","DIFF_EQUAL","length","ChangeBuffer","constructor","line","lines","pushSubstring","substring","pushDiff","Diff","pushLine","push","isLineEmpty","align","string","includes","substrings","split","iLast","forEach","i","moveLinesTo","CommonBuffer","deleteBuffer","insertBuffer","pushDiffCommonLine","pushDiffChangeLines","isDiffEmpty","flushChangeLines","subdiff","getLines","getAlignedDiffs","DIFF_DELETE","DIFF_INSERT","commonBuffer","_default"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _cleanupSemantic = require('./cleanupSemantic');\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n// Given change op and array of diffs, return concatenated string:\n// * include common strings\n// * include change strings which have argument op with changeColor\n// * exclude change strings which have opposite op\nconst concatenateRelevantDiffs = (op, diffs, changeColor) =>\n  diffs.reduce(\n    (reduced, diff) =>\n      reduced +\n      (diff[0] === _cleanupSemantic.DIFF_EQUAL\n        ? diff[1]\n        : diff[0] === op && diff[1].length !== 0 // empty if change is newline\n        ? changeColor(diff[1])\n        : ''),\n    ''\n  ); // Encapsulate change lines until either a common newline or the end.\n\nclass ChangeBuffer {\n  // incomplete line\n  // complete lines\n  constructor(op, changeColor) {\n    _defineProperty(this, 'op', void 0);\n\n    _defineProperty(this, 'line', void 0);\n\n    _defineProperty(this, 'lines', void 0);\n\n    _defineProperty(this, 'changeColor', void 0);\n\n    this.op = op;\n    this.line = [];\n    this.lines = [];\n    this.changeColor = changeColor;\n  }\n\n  pushSubstring(substring) {\n    this.pushDiff(new _cleanupSemantic.Diff(this.op, substring));\n  }\n\n  pushLine() {\n    // Assume call only if line has at least one diff,\n    // therefore an empty line must have a diff which has an empty string.\n    // If line has multiple diffs, then assume it has a common diff,\n    // therefore change diffs have change color;\n    // otherwise then it has line color only.\n    this.lines.push(\n      this.line.length !== 1\n        ? new _cleanupSemantic.Diff(\n            this.op,\n            concatenateRelevantDiffs(this.op, this.line, this.changeColor)\n          )\n        : this.line[0][0] === this.op\n        ? this.line[0] // can use instance\n        : new _cleanupSemantic.Diff(this.op, this.line[0][1]) // was common diff\n    );\n    this.line.length = 0;\n  }\n\n  isLineEmpty() {\n    return this.line.length === 0;\n  } // Minor input to buffer.\n\n  pushDiff(diff) {\n    this.line.push(diff);\n  } // Main input to buffer.\n\n  align(diff) {\n    const string = diff[1];\n\n    if (string.includes('\\n')) {\n      const substrings = string.split('\\n');\n      const iLast = substrings.length - 1;\n      substrings.forEach((substring, i) => {\n        if (i < iLast) {\n          // The first substring completes the current change line.\n          // A middle substring is a change line.\n          this.pushSubstring(substring);\n          this.pushLine();\n        } else if (substring.length !== 0) {\n          // The last substring starts a change line, if it is not empty.\n          // Important: This non-empty condition also automatically omits\n          // the newline appended to the end of expected and received strings.\n          this.pushSubstring(substring);\n        }\n      });\n    } else {\n      // Append non-multiline string to current change line.\n      this.pushDiff(diff);\n    }\n  } // Output from buffer.\n\n  moveLinesTo(lines) {\n    if (!this.isLineEmpty()) {\n      this.pushLine();\n    }\n\n    lines.push(...this.lines);\n    this.lines.length = 0;\n  }\n} // Encapsulate common and change lines.\n\nclass CommonBuffer {\n  constructor(deleteBuffer, insertBuffer) {\n    _defineProperty(this, 'deleteBuffer', void 0);\n\n    _defineProperty(this, 'insertBuffer', void 0);\n\n    _defineProperty(this, 'lines', void 0);\n\n    this.deleteBuffer = deleteBuffer;\n    this.insertBuffer = insertBuffer;\n    this.lines = [];\n  }\n\n  pushDiffCommonLine(diff) {\n    this.lines.push(diff);\n  }\n\n  pushDiffChangeLines(diff) {\n    const isDiffEmpty = diff[1].length === 0; // An empty diff string is redundant, unless a change line is empty.\n\n    if (!isDiffEmpty || this.deleteBuffer.isLineEmpty()) {\n      this.deleteBuffer.pushDiff(diff);\n    }\n\n    if (!isDiffEmpty || this.insertBuffer.isLineEmpty()) {\n      this.insertBuffer.pushDiff(diff);\n    }\n  }\n\n  flushChangeLines() {\n    this.deleteBuffer.moveLinesTo(this.lines);\n    this.insertBuffer.moveLinesTo(this.lines);\n  } // Input to buffer.\n\n  align(diff) {\n    const op = diff[0];\n    const string = diff[1];\n\n    if (string.includes('\\n')) {\n      const substrings = string.split('\\n');\n      const iLast = substrings.length - 1;\n      substrings.forEach((substring, i) => {\n        if (i === 0) {\n          const subdiff = new _cleanupSemantic.Diff(op, substring);\n\n          if (\n            this.deleteBuffer.isLineEmpty() &&\n            this.insertBuffer.isLineEmpty()\n          ) {\n            // If both current change lines are empty,\n            // then the first substring is a common line.\n            this.flushChangeLines();\n            this.pushDiffCommonLine(subdiff);\n          } else {\n            // If either current change line is non-empty,\n            // then the first substring completes the change lines.\n            this.pushDiffChangeLines(subdiff);\n            this.flushChangeLines();\n          }\n        } else if (i < iLast) {\n          // A middle substring is a common line.\n          this.pushDiffCommonLine(new _cleanupSemantic.Diff(op, substring));\n        } else if (substring.length !== 0) {\n          // The last substring starts a change line, if it is not empty.\n          // Important: This non-empty condition also automatically omits\n          // the newline appended to the end of expected and received strings.\n          this.pushDiffChangeLines(new _cleanupSemantic.Diff(op, substring));\n        }\n      });\n    } else {\n      // Append non-multiline string to current change lines.\n      // Important: It cannot be at the end following empty change lines,\n      // because newline appended to the end of expected and received strings.\n      this.pushDiffChangeLines(diff);\n    }\n  } // Output from buffer.\n\n  getLines() {\n    this.flushChangeLines();\n    return this.lines;\n  }\n} // Given diffs from expected and received strings,\n// return new array of diffs split or joined into lines.\n//\n// To correctly align a change line at the end, the algorithm:\n// * assumes that a newline was appended to the strings\n// * omits the last newline from the output array\n//\n// Assume the function is not called:\n// * if either expected or received is empty string\n// * if neither expected nor received is multiline string\n\nconst getAlignedDiffs = (diffs, changeColor) => {\n  const deleteBuffer = new ChangeBuffer(\n    _cleanupSemantic.DIFF_DELETE,\n    changeColor\n  );\n  const insertBuffer = new ChangeBuffer(\n    _cleanupSemantic.DIFF_INSERT,\n    changeColor\n  );\n  const commonBuffer = new CommonBuffer(deleteBuffer, insertBuffer);\n  diffs.forEach(diff => {\n    switch (diff[0]) {\n      case _cleanupSemantic.DIFF_DELETE:\n        deleteBuffer.align(diff);\n        break;\n\n      case _cleanupSemantic.DIFF_INSERT:\n        insertBuffer.align(diff);\n        break;\n\n      default:\n        commonBuffer.align(diff);\n    }\n  });\n  return commonBuffer.getLines();\n};\n\nvar _default = getAlignedDiffs;\nexports.default = _default;\n"]},"metadata":{},"sourceType":"script"}